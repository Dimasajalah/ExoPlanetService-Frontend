 PENGEMBANGAN APLIKASI WEBSITE VISUALISASI INTERAKTIF DATA EXOPLANET MENGGUNAKAN  FRAMEWORK REACTJS DAN FLASK

















DIMAS ANGGORO SAKTI
NIM.2110511115






FAKULTAS ILMU KOMPUTER
UNIVERSITAS PEMBANGUNAN NASIONAL "VETERAN" JAKARTA
2025


PERNYATAAN MENGENAI SKRIPSI DAN SUMBER INFORMASI SERTA PELIMPAHAN HAK CIPTA










ABSTRAK
Visualisasi interaktif data menjadi aspek penting dalam menyampaikan informasi kompleks secara intuitif dan menarik, terutama pada bidang astronomi yang sarat dengan data ilmiah seperti exoplanet. Namun, penyajian data exoplanet dalam bentuk statis kurang efektif dalam mendukung pemahaman pengguna. Penelitian ini mengembangkan sebuah aplikasi website interaktif untuk visualisasi data exoplanet dengan memanfaatkan framework ReactJS pada frontend dan Flask pada backend, serta menggunakan MongoDB sebagai basis data. Sistem ini menampilkan data exoplanet dalam bentuk tabel, grafik orbit, dan karakteristik lainnya seperti jarak, ukuran, serta metode deteksi. Visualisasi menggunakan pustaka Chart.js dan D3.js mendukung pengalaman eksploratif yang responsif. Backend dikembangkan menggunakan API Flask dengan pengolahan data dari MongoDB, sementara integrasi frontend dan backend dilakukan melalui fetch API. Hasil implementasi menunjukkan bahwa aplikasi mampu menyajikan visualisasi real-time yang interaktif dan kompatibel di berbagai perangkat dan browser. Pengguna dapat melakukan pencarian, filter, dan melihat detail tiap exoplanet dengan cepat dan efisien. Penelitian ini membuktikan bahwa integrasi teknologi web modern dapat meningkatkan pemahaman pengguna terhadap data astronomi sekaligus memberikan pengalaman antarmuka yang intuitif.
Kata Kunci: Visualisasi Data, Exoplanet, ReactJS, Flask, MongoDB, D3.js, Chart.js

















ABSTRACT
Interactive data visualization plays a crucial role in presenting complex scientific information in an intuitive and engaging manner, especially in astronomy where datasets such as exoplanets are rich and multifaceted. However, static representations of exoplanet data often fail to support effective user understanding. This study developed an interactive web-based application for exoplanet data visualization using ReactJS as the frontend framework and Flask for the backend, with MongoDB serving as the database. The system displays exoplanet data in tabular format and visualizes orbital and physical characteristics such as distance, size, and detection method. Visualization libraries such as Chart.js and D3.js enable responsive and exploratory user experiences. The backend is built using Flask APIs that retrieve and process data from MongoDB, while frontend-backend integration is facilitated through fetch API calls. Implementation results show that the application delivers real-time, interactive visualizations compatible across devices and browsers. Users can perform search, filtering, and view detailed information of each exoplanet efficiently. This research demonstrates that modern web technology integration can significantly enhance user comprehension of astronomical data while maintaining an intuitive interface experience.
Keywords: Data Visualization, Exoplanets, ReactJS, Flask, MongoDB, D3.js, Chart.js


















PENGEMBANGAN APLIKASI WEBSITE VISUALISASI INTERAKTIF DATA EXOPLANET MENGGUNAKAN  FRAMEWORK REACTJS DAN FLASK








DIMAS ANGGORO SAKTI
2110511115




Proposal Skripsi
sebagai salah satu syarat untuk melaksanakan
penelitian oleh mahasiswa pada
Program Studi S1 Informatika







NAMA S1 INFORMATIKA
FAKULTAS ILMU KOMPUTER
UNIVERSITAS PEMBANGUNAN NASIONAL "VETERAN" JAKARTA
JAKARTA
2025

LEMBAR PERSETUJUAN

KATA PENGANTAR

	Segala puji dan Syukur penulis dipanjatkan atas kehadirat Tuhan Yang Maha Esa. Berkat rahmat, karunia, serta kehendak-Nya, penulis dapat menyelesaikan proposal skripsi berjudul "Pengembangan Aplikasi Website Visualisasi Interaktif Data Exoplanet Menggunakan  Framework ReactJS dan Flask" dengan baik. Tujuan dari pembuatan skripsi ini untuk memenuhi syarat kelulusan untuk gelar S1 Informatika Fakultas Ilmu Komputer, Universitas Pembangunan Veteran Jakarta. 
Dalam penyusunan proposal skripsi ini, penulis memperoleh banyak bantuan serta dukungan secara moral ataupun materil. Oleh karena itu, penulis ingin mengungkapkan rasa terima kasih yang sebesar-besarnya kepada:
1. Ibu dan ayah saya yang selalu memberikan bantuan, semangat, dan doa. Terima kasih atas nasihat dan saran yang membantu untuk membuat proposal ini.
2. Bapak Dr. Tjahjanto, S.Kom., M.M., selaku dosen pembimbing I yang telah memberikan Sumber referensi untuk penelitian proposal ini, serta arahan selama proses penulisan proposal ini.
3. Bapak Muhammad Adrezo, S.Kom.,M.Sc . selaku dosen pembimbing II yang juga telah memberikan kritik, saran, arahan, ide, serta dukungan dalam penyelesaian proposal skripsi ini.
4. Bapak Radinal Setyadinsa, S.Pd., M.T.I. selaku dosen pembimbing akademik yang membantu penulis selama masa bimbingan proses akademik penulis selama perkuliahan.
5. Pakar penelitian proposal saya, yaitu Dr. Anton Timur Jaelani, S.Si., M.Si.yang membantu penulis dalam referensi jurnal yang berkaitan dengan penelitian, memberikan bimbingan terkait metodologi yang tepat, serta saran teknis yang digunakan dalam penelitian ini.
6. Pihak-pihak yang terlibat baik sceara langsung maupun tidak langsung, yang tidak dapat penulis sebutkan satu per satu tanpa mengurangi rasa hormat. Penulis mengucapkan terima kasih atas segala bantuan yang berkaitan dengan penelitian proposal ini, sehingga proposal skripsi ini dapat diselesaikan dengan baik.
Jakarta, 12 November 2024

     Dimas Anggoro Sakti










 
DAFTAR ISI

JUDUL	i
PERNYATAAN MENGENAI SKRIPSI DAN SUMBER INFORMASI SERTA PELIMPAHAN HAK CIPTA	i
ABSTRAK	ii
KATA PENGANTAR	vi
DAFTAR ISI	vii
DAFTAR TABEL	x
DAFTAR GAMBAR	xi
DAFTAR LAMPIRAN	xii
BAB 1 PENDAHULUAN	1
1.1    Latar Belakang	1
1.2    Rumusan Masalah	3
1.3    Tujuan Penelitian	3
1.4    Manfaat Penelitian	4
1.5    Ruang Lingkup Penelitian	4
1.6     Luaran Yang Diharapkan	5
1.7    Sistematika Penulisan	5
BAB II   TINJAUAN PUSTAKA	7
2.1    Exoplanet	7
2.2    Visualisasi Data	8
2.3    Website	9
2.3.1 Desain Sistem	9
2.3.2 Implementasi dan Pengembangan	10
2.3.3 Pengujian Sistem	10
2.3.4 Pemeliharaan dan Pengembangan Selanjutnya	10
2.3    Web Development	11
2.4	Library Untuk Penelitian	11
2.5 Konsep Arsitektur Perangkat Lunak	13
2.5.1 Component Based Architecture	13
2.5.2 Model-Driven Engineering (MDE)	14
2.5.3 Service-Oriented Architecture (SOA)	15
2.5.4 Microservices Architecture	17
2.6 RESTful API	18
2.7 Software Development Life Cycle (SDLC) dan Metodologi Pengembangan Perangkat Lunak	20
2.7.1 SDLC (Software Development Life Cycle)	20
2.7.2 Metodologi Pengembangan: Waterfall vs. Agile	21
2.7.3 Pendekatan yang Digunakan	21
2.5    Python	21
2.6     Aplikasi Website Penelitian	22
2.7    Framework Aplikasi	22
2.8    Usability	23
2.9    Responsive Design	23
2.10  Flowchart	24
2.11 UML (Unified Modelling Language)	26
2.11.1 Use Case Diagram	27
2.11.2 Activity Diagram	28
2.12 UI/UX Design	29
2.12.1 User Interface (UI) Design	29
2.12.2 User Experience (UX) Design	30
2.13  Flask	31
2.14  REST API	32
2.15  Metode Waterfall	33
2.16  Black Box Testing	34
2.17  Benchmark	35
2.18  Penelitian Terkait	35
BAB III  METODE PENELITIAN	38
3.1          Kerangka Berpikir	38
3.1.1 Identifikasi Masalah	39
3.1.2 Studi Literatur	40
3.1.3 Pengumpulan Data	41
3.1.4 Perencanaan	41
3.1.6 Variabel dan Indikator	49
3.1.8 Implementasi	51
3.1.7 Pengujian	55
3.2 Jadwal Penelitian	57
BAB IV	58
PEMBAHASAN	58
4.1 Profil Perusahaan	58
4.2 Analisis Kebutuhan Sistem	58
4.2.1 Kebutuhan Fungsional	58
4.2.2 Kebutuhan Non-Fungsional	58
4.2.3 Kebutuhan Perangkat Keras dan Lunak	59
4.3 Class Diagram	60
4.3 Activity Diagram	60
4.3 Penyusunan product backlog dan sprint	60
4.3.1 Product Backlog	60
4.3.2 Sprint Backlog (Iterasi)	61
4.4 Desain Database dan API Backend	62
4.4.1 Struktur Database	62
4.5 Implementasi Sistem	70
4.5.1 Implementasi Frontend ReactJS	70
4.5.3 Implementasi Visualisasi Interaktif	76
4.6 Hasil Tampilan Antarmuka Aplikasi	78
4.7.1 Halaman Beranda	79
4.7.2 Halaman Login	79
4.7.3 Halaman Daftar	80
4.7.4 Halaman Profile	81
4.7.5 Halaman Admin untuk menampilkan data Exoplanet dari API	81
4.7.6 Halaman explore-data	82
4.7.8 Halaman NASA Astronomical Picture Of The Day	83
4.7 Pengujian dan Evaluasi Sistem	84
4.7.1 Pengujian Backend (Flask API)	84
4.8.2 Pengujian Frontend (ReactJS)	86
4.8.4 Pengujian Black Box	88
4.8.4 Evaluasi Performa Visualisasi	89
4.8.5 Evaluasi Kuantitatif terhadap Pengalaman Pengguna	89
4.8.6 Hasil Evaluasi dan Analisis Deskriptif	91
4.10 Implementasi Aplikasi	92
BAB V PENUTUP	93
5.1 Kesimpulan	93
5.2 Saran	93
DAFTAR PUSTAKA	94
DAFTAR LAMPIRAN	96





















DAFTAR TABEL
Tabel 2.1 Komponen Flowchart	30
Tabel 2.2 Komponen dan Relasi Use Case Diagram (Ramdany et al., n.d.)	32
Tabel 2.3 Komponen Untuk Activity Diagram (Rumbaugh, Jacobson, & Booch, 2021)	33
Tabel 2.4 Daftar Penelitian Terdahulu	42 
Tabel 3.1 Jadwal Penelitian	101
Tabel 4.1 Respons Endpoint	104
Tabel 4.2 Hasil Pengujian Frontend Aplikasi	105
Tabel 4. 3 Hasil Pengujian Black Box	105
Tabel 4.4 Hasil Pengujian Performa Visualisasi	106





DAFTAR GAMBAR
Gambar 2.1 Contoh Planet Extrasurya Yang Layak Huni	9
Gambar 2. 2 Contoh UI Design	23
Gambar 2. 3 Alur Proses UX Design	24
Gambar 2. 4 Framework Flask	25
Gambar 2. 5 Alur Kerja REST API	26
Gambar 2. 6 Alur Kerja Model Waterfall	27
Gambar 2. 7 Alur Kerja Black Box Testing	28
Gambar 3. 1 Alur Kerja Penelitian	40
Gambar 3. 2 Use Case Diagram Dari Rancangan Aplikasi	46
Gambar 3.3 Activity Diagram Admin Katalog Exoplanet	47
Gambar 3. 4 Activity Diagram User Katalog Exoplanet	67
Gambar 3. 5 UI/UX Design Aplikasi Interaktif Exoplanet	69
Gambar 4. 1 Struktur koleksi exoplanets dari database MongoDB	79
Gambar 4. 2 Skema MongoDB	79
Gambar 4. 3 Konfigurasi Firebase untuk Autentikasi	80
Gambar 4. 4 Tabel dari dataset exoplanet	80
Gambar 4. 5 Kode App.py	83
Gambar 4. 6 Bagian kode untuk rute autentikasi, Machine Learning Analyzer dan error handler	84
Gambar 4. 7 Endpoint /api/exoplanets	85
Gambar 4. 8 Endpoint /api/tess-candidates	86
Gambar 4. 9 Endpoint /api/planetary-systems	86
Gambar 4. 10 Kode home.js	88
Gambar 4. 11 Kode KeplerConfirmedApp.jsx	90
Gambar 4. 12 Kode Admin.jsx	91
Gambar 4. 13 Kode App.jsx	93
Gambar 4. 14 Kode ScatterHistogramLayout.jsx	94
Gambar 4. 15 Kode PlotSettingContext.jsx	95
Gambar 4. 16 Kode CSVDataContext.jsx	95
Gambar 4. 17 Halaman Beranda EXOPLORERS	98
Gambar 4. 18  Halaman Login	98
Gambar 4. 19 Halaman Sign Up	99
Gambar 4. 20 Halaman Profile	100
Gambar 4. 21 Halaman Admin	100
Gambar 4. 22 Tampilan Scatter Plot	101
Gambar 4. 23 Tampilan Histogram	101
Gambar 4. 24 Tampilan Split View	102
Gambar 4. 25 Halaman NASA-APOD	102



DAFTAR LAMPIRAN
Lembar Persetujuan ................................................................................. ii













BAB 1
PENDAHULUAN
1.1    Latar Belakang
     Perkembangan teknologi yang pesat di era industri 4.0 telah mengubah dunia ini secara signifikan. Selain perkembangan teknologi di era industry, Dunia Astronomi dan Astrofisika juga mengalami perkembangan yang signifikan mulai dari pendeteksian exoplanet yang jaraknya bisa beratusan tahun cahaya hingga objek yang bermassa sangat besar seperti quasar, Bintang neutron,  bagaimana cara kerja orbit Bintang pada galaksi, dan objek yang diluar pemahaman kita seperti titik singularitas pada Lubang Hitam (Black Hole), Bagaimana Luar angkasa berkembang, Dan objek luar angkasa lainnya (Ke-ting et al. 2024). 
     Di galaksi Bima Sakti Sendiri Setidaknya ada kurang lebih 200 milliar Bintang, dan berdasarkan observasi misi seperti Kepler dan Tess, ilmuwan memperkirakan setidaknya ada 200 hingga 400 milliar exoplanet di dalam galaksi bimasakti ini. Untuk exoplanet layak huni sendiri jumlahnya sekitar 4 milliar exoplanet layak huni di galaksi Bima Sakti berdasarkan model statistic dari data kepler. Untuk data setiap objek luar angkasa tersebut seperti exoplanet, nama Bintang, Tahun ditemukan, Periode Orbital, Radius Planet, Massa Exoplanet, Suhu Permukaan Exoplanet, sistem pendeteksian, seperti Spektroskopi, Mikrolensing, Direct Imaging, dan Transit method. Disimpan di dalam berbagai website seperti NASA Exoplanet Archive, Exoplanet-EU, NASA Exoplanet, Exoplanet Data Explorer, Open Exoplanet Catalogue, Dan website lainnya yang menyimpan data dan parameter exoplanet.  fiturnya yang kurang efiisien, dan fiturnya tidak ramah bagi orang awam yang ingin mempelajari objek astronomi dan luar angkasa (Qiu et al. 2024). 
     Website yang menyediakan data exoplanet dan menyediakan fitur edukatif dan ilmiah tentang exoplanet dan Antariksa seperti NASA Exoplanet Archive, Exoplanet.eu, dan NASA.GOV. Website tersebut menyediakan bermacam-macam fitur penting untuk kepentingan ilmiah, dan edukasi tentang exoplanet dan dunia Antariksa. Fitur website seperti Exoplanet.eu dan NASA Exoplanet Archive menyediakan katalog exoplanet dan website tersebut memiliki fitur penting di dalam katalognya seperti Nama planet,  Bintang induk, Massa, radius, suhu permukaan, periode orbit, dan parameter habitabilitas seperti zona layak huni. Lalu pada website ini ada fitur visualisasi data dalam bentuk grafik dinamis seperti Scatterplot, Histogram, dan 3D map. Website tersebut juga mempunyai fitur lainnya seperti pencarian data, eksport data dan referensi penelitian. Setelah website NASA Exoplanet Archive dan Exoplanet-eu ada website resmi dari NASA yang Bernama NASA.gov yang dimiliki oleh National Aeronautics and Space Administration atau lebih dikenal sebagai NASA. Situs NASA.gov menyediakan berbagai informasi ilmiah dan edukatif, termasuk exoplanet. Situs NASA.gov juga menyedaikan bermacam fitur di dalam websitenya seperti Berita terkini tentang misi terbaru NASA, Fitur multimedia seperti NASA Image and Video Library Dimana video dan gambarnya bisa diunduh,Visualisasi interaktif seperti Eyes on the Solar System untuk visualisasi real-time tata surya menggunakan sistem 3D, dan Eyes on Exoplanets untuk eksplorasi exoplanet menggunakan sistem 3D (Hasan et al. 2024). Selain itu situs NASA juga memiliki ensiklopedia digital yang Bernama NASA Exoplanet Catalog, yang mencakup lebih dari 5.800 exoplanet. NASA Exoplanet Catalog juga memiliki fitur-fitur seperti fitur visualisasi 3D interaktif, filter pencarian, dan integrasi dengan misi NASA yang lainnya seerti Kepler, TESS, dan James Webb Space Telescope.
     Untuk keamanan website yang dimiliki NASA seperti NASA.GOV dan NASA Exoplanet Archive memiliki keamanan siber yang komprehensif seperti fitur non public atau privat milik NASA dilindungi dengan prosek autentikasi yang ketat dengan menggunakan NASA Smartcard atau RSA SecureID token dan penggunaan enkripsi sesuai dengan standar FIPS 140-2(Ahmed et al.) .Untuk Website NASA Exoplanet Archive, keamanan informasinya dioperasikan oleh NASA Exoplanet Science Institute (NExScl) #(referensi). Untuk situs Exoplanet.eu sendiri memiliki autentikasi seperti login untuk mengakses fitur tambahan dan keamanan yang kredibel.
     Walaupun Banyak website yang menyimpan parameter exoplanet secara komprehensif dan fitur yang mendukung untuk edukasi dan penelitian tentang exoplanet dan dunia astronomi seperti NASA Exoplanet Archive, Exoplanet-eu, dan NASA.gov (Walingkas et al. 2023; Zhao et al. 2024). Masing-masing platform situs tersebut memiliki keterbatasan yang menjadi celah untuk pengembangan sistem yang lebih baik dan interaktif. Didalam situs NASA Exoplanet Archive, antarmuka pengguna (UI) terlalu teknis dan kurang intuitif bagi pengguna awam. Tampilan untuk visualisasi data yang tidak responsive dan interaktif pada Tools Nasa Exoplanet Archive seperti Interactive Tables Search and File Upload, Confirmed planets Plotting Tool, dan Periodogram. Pada situs Exoplanet.eu memiliki struktur data yang lengkap tetapi visualisasi datanya terbatas dan navigasi situsnya tidak ramah untuk pengguna awam. Di sisi lain NASA.gov memiliki fitur yang lebih interaktif, namun pengguna tidak bisa mengakses data numerik dan visualisasinya secara langsung  karena belum terintegrasi. 
     Membuat website yang ramah pengguna(user-friendly) menjadi kunci supaya pengguna awam bisa membaca data exoplanet yang kompleks menjadi fitur yang mudah dipahami, menarik, dan bisa dieksplorasi. Oleh karena itu. Bagian frontend projek ini akan menggunakan ReactJS dan Flask untuk backendnya. ReactJS adalah Pustaka JavaScript untuk membangun antarmuka pengguna. Salah satu fitur React yaitu Virtual DOM memiliki fitur Dimana pembaruan data antarmuka lebih cepat dibandingkan dengan fitur lainnya (Walingkas et al. 2023). Untuk bagian backendnya akan menggunakan Flask. Flask adalah microframework berbasis Python yang dirancang untuk pengembangan aplikasi web. Flask bisa mendukung pengembangan Backend dengan merancang REST API dan mengembangkan sistem autentikasi, database, dan form .Flask juga digunakan untuk memproses API dari situs penyedia API, perancangan data, dan mengirim hasilnya ke dalam frontend. Pemilihan Flask didasarkan pada kemudahan integrasi dengan Python, kesederhanaan struktur proyek, serta kemampuannya menangani kebutuhan API yang kompleks secara efisien (Walingkas et al. 2023).
     Salah satu studi yang sejalan dengan pengembangan aplikasi website exoplanet interaktif adalah penelitian oleh Ridwan Amirul Maulana (2024) yang berjudul "Pengembangan Website Astronomia Berbasis Website sebagai Media Pembelajaran Astronomi" dari Universitas Muhammadiyah Yogyakarta. Penelitian ini bertujuan untuk membangun media pembelajaran astronomi berbasis website menggunakan framework Laravel, dengan fitur-fitur seperti video pembelajaran dan sumber informasi yang kredibel. Namun framework yang digunakan tidak mendukung pengembangan aplikasi website yang interaktif, dan pengembangan website tersebut hanya untuk menampilkan informasi statis dan pembaruan data dalam framework Laravel tidak secepat virtual DOM, dan tidak ada fitur autentikasinya (Bai 2023).
     Berdasarkan penelitian tersebut, website dengan tema astronomi bisa dikembangkan lagi secara luas dan ramah pengguna. Dikarenakan website pada penelitian mereka kurang fitur interakif dan visualisasi data. Maka pengembangan aplikasi website visualisasi data exoplanet. Fitur-fitur seperti autentikasi, visualisasi data, dan tampilan interaktif akan ditambahkan pada aplikasi website aplikasi website visualisasi data exoplanet  ini dengan ampilan web yang dinamis menggunakan ReactJS dan Menangani logika server dan pengolahan data dengan Flask supaya aplikasi website ini lebih responsive, efisienm dan mendukung fitur interaktif secara real-time. Melalui penelitian ini, diharapkan dapat tercipta kontribusi signifikan dalam pengembangan aplikasi website dan penyajian data yang tidak hanya responsif, menarik, dan edukatif, serta memperkaya literatur mengenai implementasi web dalam dunia astronomi, edukasi, dan sains.
1.2    Rumusan Masalah
     Rumusan masalah dalam penelitian ini difokuskan pada pengembangan aplikasi website Pengembangan aplikasi website visualisasi interaktif data exoplanet menggunakan framework ReactJS dan Flask. Beberapa pertanyaan yang akan dijawab dalam penelitian ini adalah:
1. Bagaimana cara merancang dan mengembangkan aplikasi website visualisasi interaktif data exoplanet yang informatif dan ramah pengguna, terutama bagi pengguna yang tidak mengerti tentang dunia astronomi?
2. Bagaimana cara mengimplementasikan fitur visualisasi data eksoplanet secara interaktif, dinamis, dan real-time pada anatarmuka pengguna (frontend) menggunakan reactJS?
3. Bagaimana cara mengimplementasikan data exoplanet dari berbagai API ke dalam backend website dan menyajikanya melalui tampilan antarmuka yang dinamis dan responsif menggunakan Flask?
1.3    Tujuan Penelitian
     Penelitian ini bertujuan untuk mengembangkan aplikasi website exoplanet yang interaktif dan dinamis. Tujuan spesifik dari penelitian ini adalah:
1. Merancang dan mengembangkan aplikasi website visualisasi interaktif data eksoplanet yang informatif dan ramah pengguna, sehingga dapat diakses dan dipahami oleh pengguna awam yang tidak memiliki latar belakang di bidang astronomi.
2. Mengimplementasikan fitur visualisasi data eksoplanet secara interaktif, dinamis, dan real-time pada antarmuka pengguna (frontend) menggunakan framework ReactJS, agar penyajian data menjadi lebih menarik dan eksploratif.
3. Mengimplementasikan pengelolaan dan integrasi data eksoplanet dari berbagai sumber API ke dalam backend website menggunakan Flask, serta menyajikan data tersebut melalui tampilan antarmuka yang responsif dan mendukung interaktivitas pengguna.
1.4    Manfaat Penelitian
     Penelitian ini diharapkan memberikan berbagai manfaat, baik bagi peneliti, institusi pendidikan, maupun masyarakat luas, sebagai berikut:
1. Bagi Peneliti: Penelitian ini dapat membantu peneliti dalam referensi dan dasar pengembangan web interaktif data exoplanet menggunakan ReactJS dan Flask
2. Bagi Institusi Pendidikan: Hasil dari penelitian ini dapat menjadi referensi dan bahan ajar bagi institusi pendidikan, khususnya program studi terkait dengan ilmu komputer dan astronomi terkait.
3. Bagi Ilmu Pengetahuan: Penelitian ini diharapkan mampu menambah kontribusi ilmiah di bidang ilmu computer dan astronomi serta menambah literatur mengenai aplikasi website unuk penyajian data astronomi
4. Bagi Komunitas Astronomi: Aplikasi yang dikembangkan dari penelitian ini akan sangat bermanfaat bagi astronom dengan menyediakan situs yang bisa diakses secara real-time dan interaktif
5. Bagi Masyarakat Luas: Aplikasi website ini mengedukasi Masyarakat awam terkait bidang astronomi melalui media yang interaktif.
1.5    Ruang Lingkup Penelitian
     Ruang lingkup penelitian ini mencakup beberapa aspek utama untuk memastikan fokus dan efektivitas dalam mencapai tujuan yang telah ditetapkan, yaitu:
1. Ruang Lingkup Identifikasi Masalah
Tahap ini mencakup pada identifikasi kekurangan, kendala dan tantangan apda pengembangan aplikasi website data exoplanet interaktif berbasis reactJS dan Flask
2. Ruang Lingkup Studi Literatur
Pada tahap studi literatur, penelitian ini akan mengkaji berbagai referensi yang berkaitan dengan Pengembangan web (Web Development), Astronomi, dan keamanan data
3. Ruang Lingkup Pembuatan Aplikasi
Pembuatan aplikasi melibatkan pengembangan aplikasi website visualisasi interaktif data eksoplanet menggunakan ReactJS untuk frontend dan Flask untuk backend.
4. Ruang Lingkup Pengujian
Pengujian aplikasi website ini berupa pengujian responsivitas pada berbagai  perangkat seperti desktop, tablet, smartphone,  pengujian usability ke pengguna dan menguji performa aplikasi dalam menampilkan data secara real-time.
5. Ruang Lingkup Penerapan
Tahap penerapan mencakup penggunaan aplikasi sebagai alat bantu penelitian dan pengembangan ilmu pengetahuan di bidang astronomi khususnya exoplanet dan menambahkan fitur feedback untuk meningkatkan fitur dan pengalaman pengguna.
1.6     Luaran Yang Diharapkan
 Luaran yang diharapkan dari penelitian ini adalah sebagai berikut:
1. Sebuah aplikasi website yang bisa menyajikan data exoplanet secara dinamis, interaktif, dan ramah pengguna, bagi pengguna awam mauun akademisi
2. Bisa mengintegrasikan data eksoplanet dari berbagai API resmi dengan fitur visualisasi data dalam bentuk grafik, peta 3D, dan filter pencarian yang responsif.
3. Dokumentasi lengkap mengenai desain, arsitektur, dan implementasi aplikasi menggunakan ReactJS dan Flask, termasuk cara integrasi API dan sistem autentikasi pengguna. 
4. Menambah literatur terkait pengembangan aplikasi web interaktif di bidang astronomi, khususnya visualisasi data eksoplanet.
5. Hasil pengujian fungsionalitas, performa, dan usabilitas aplikasi website yang dapat digunakan sebagai bahan evaluasi untuk pengembangan aplikasi selanjutnya
1.7    Sistematika Penulisan	
     Proposal skripsi ini disusun berdasarkan sistematika penulisan yang dibagi menjadi beberapa bab sebagai berikut:
BAB 1 PENDAHULUAN
Bab ini menjelaskan latar belakang penelitian, rumusan masalah, tujuan
penelitian, manfaat penelitian, ruang lingkup penelitian, luaran yang diharapkan, dan sistematika penulisan yang digunakan. Tujuannya adalah memberikan gambaran umum mengenai alasan dan pentingnya penelitian ini dalam konteks pengembangan aplikasi website data exoplanet interaktif menggunakan ReactjS dan Flask
BAB II LANDASAN TEORI
Bab ini membahas teori-teori yang mendasari penelitian, termasuk teori mengenai exoplanet, Web Development, visualisasi data, teknologi ReactJS dan Flask, serta referensi penelitian terdahulu yang relevan.
BAB III METODE PENELITIAN
Bab ini menjelaskan metode yang digunakan dalam penelitian, meliputi desain penelitian, Software Development Life Cycle (SDLC), tools dan teknologi yang digunakan, serta pengumpulan data.
BAB IV HASIL DAN PEMBAHASAN
Bab ini menjelaskan tentang hasil pengembangan aplikasi website visualisasi data exoplanet, termasuk fitur-fitur yang dibuat, hasil pengujian dari segi responsivitas, usability, dan performa aplikasi.
BAB V PENUTUP
Bab ini memaparkan kesimpulan dan saran dari pengembangan aplikasi web ini.
DAFTAR PUSTAKA
Daftar Pustaka berisi daftar referensi yang digunakan dalam penelitian ini sebagai acuan teori, metode, dan konsep yang relevan.


BAB II 
 TINJAUAN PUSTAKA
2.1    Exoplanet
     Exoplanet atau planet extrasurya merupakan planet yang mengorbit Bintang selain matahari, atau planet diluar tata surya. Klasifikasi eksoplanet bukanlah masalah mendefinisikan "planet." Sesuai dengan namanya, eksoplanet sudah dianggap sebagai planet, dan masalahnya adalah mendefinisikan kelas-kelas planet pada takson lain di bawah sistem klasifikasi (Dick, S.J. 2024). Berdasarkan definisi yang diberikan oleh International Astronomical Union (IAU) sebagaimana dikutip oleh  (Malik et al. 2020), terdapat beberapa kriteria yang digunakan untuk mendefinisikan eksoplanet secara ilmiah. Pertama, Objek dengan massa sebenarnya di bawah massa pembatas untuk fusi termonuklir deuterium (saat ini dihitung menjadi 13 massa Jupiter untuk objek metalisitas matahari) yang mengorbit bintang, katai coklat atau sisa-sisa bintang dan yang memiliki rasio massa dengan objek pusat di bawah ketidakstabilan L4/L5 (M/Mcentral < 2/(25+v621) � 1/25) adalah "planet" (tidak peduli bagaimana planet ekstrasurya tersebut terbentuk). Massa/ukuran minimum yang diperlukan agar objek ekstrasurya dianggap sebagai planet harus sama dengan yang digunakan dalam Tata Surya kita. Kedua, apabila suatu objek subbintang dengan massa sebenarnya di atas massa pembatas untuk fusi termonuklir deuterium adalah "katai coklat", tidak peduli bagaimana mereka terbentuk atau di mana mereka berada. Ketiga, untuk Objek yang mengambang bebas di gugusan bintang muda dengan massa di bawah massa pembatas untuk fusi termonuklir deuterium bukanlah "planet", tetapi "sub-katai coklat" (atau nama apa pun yang paling tepat).
     
     Penemuan dan karakterisasi eksoplanet layak huni (yaitu, planet yang dapat mempertahankan air cair yang stabil di permukaannya telah ditetapkan sebagai salah satu tujuan dekade utama untuk astronomi, ilmu planet, dan astrobiologi. Konsep misi yang disebut Habitable Worlds Observatory (HWO) sedang dikembangkan oleh NASA untuk membantu mencapai tujuan mendalam ini. Yang terpenting, HWO dibangun di atas keberhasilan misi konsep pencitraan langsung berbasis ruang angkasa sebelumnya, seperti Habitable Exoplanet Observatory dan Large Ultraviolet/Optical/Infrared Surveyor. Demonstrasi koronagraf sebagai bagian dari Teleskop Luar Angkasa Nancy Grace Roman NASA yang akan segera diluncurkan juga akan memberikan wawasan utama tentang teknik pencitraan kontras tinggi eksoplanet berbasis ruang angkasa(Salvador et al. 2024). 

Gambar 2.1 Contoh Planet Extrasurya Yang Layak Huni
2.2    Visualisasi Data
     Visualisasi data merupakan teknik dasar yang digunakan untuk menyampaikan informasi secara jelas dan efisien kepada pengguna lewat grafik informasi yang dipilih, seperti tabel dan grafik  (Sarjana et al.)Visualisasi data  memudahkan pengguna untuk memahami data yang kompleks atau data berskala besar  dan visualisasi data membuat pemahaman pola, dan tren dengan cara menyajikannya dalam bentuk visual yang lebih intuitif dan lebih mudah. Visualisasi data juga memudahkan pengguna awam mengakses data tanpa mempelajarinya lebih mendalam. Visualisasi data tidak hanya membantu pengguna awam dalam memahami pola didalam sebuah data, tetapi juga memainkan peran penting dalam proses pengambilan keputusan berbasis data (Ouyang, 2024).
     Menurut (Sarjana et al.). Visualisasi data memanfaatkan prinsip-prinsip persepsi visual manusia supaya informasinya bisa ditangkap oleh pengguna awam. Pemilihan elemen visual seperti warna, bentuk, ukuran, dan posisi sangat menentukan seberapa baik informasi yang bisa ditangkap oleh pengguna. Oleh karena itu, desain visualisasi yang baik harus mempertimbangkan aspek kognitif pengguna agar tidak menimbulkan ambiguitas atau salah tafsir terhadap data yang disajikan. Visualisasi data bisa digunakkan dalam berbagai bidang seperti Bisnis/Manajemen, Data Science, Keuangan, Kesehatan/Medis dan Ilmu Sosial.
     Ada  berbagai macam jenis visualisasi data dan muncul dalam berbagai jenis seperti grafik batang, grafik garis, pie chart, scatter plot, dan bahkan peta interaktif atau representasi tiga dimensi (3D), tergantung pada jenis dan kompleksitas data. Library ReactJS seperti D3.js, Chart.js, dan React-chartjs memungkinkan integrasi visualisasi data yang dinamis dan interaktif ke dalam frontend secara langsung. Untuk bidang astronomi, seperti data eksoplanet, visualisasi data menjadi alat yang penting untuk mengambarkan representasi berbagai parameter fisik seperti massa, jari-jari, jarak orbit, suhu, dan posisi dalam tata surya asing. Dengan bantuan visualisasi, pengguna awam pun dapat memahami hubungan antarparameter exoplanet tersebut dengan lebih mudah, sekaligus meningkatkan minat dan kesadaran public terhadap bidang astronomi (Ouyang, 2024).
2.3    Website
     Tahap perancangan dan pengembangan website merupakan fondasi utama dalam pembuatan aplikasi visualisasi interaktif data eksoplanet. Perancangan sistem dilakukan dengan tujuan menghasilkan aplikasi yang tidak hanya fungsional tetapi juga mudah digunakan oleh pengguna. Dalam konteks ini, aplikasi dibangun dengan memanfaatkan framework ReactJS pada sisi frontend dan Flask pada sisi backend. ReactJS dipilih karena kemampuannya dalam membuat antarmuka pengguna berbasis komponen yang dinamis dan responsif, sedangkan Flask dipilih untuk pengembangan backend karena ringan, fleksibel, serta mudah diintegrasikan dengan berbagai database dan layanan API.
     Menurut jurnal dari  (referensi) .dalam pengembangan aplikasi web, perancangan yang baik sangat diperlukan untuk memastikan integrasi yang lancar antara frontend dan backend. Struktur aplikasi dibuat modular dengan pembagian tugas yang jelas, di mana ReactJS bertanggung jawab atas interaksi dan tampilan data, sementara Flask mengelola penyediaan data melalui RESTful API. Selain itu, desain antarmuka dirancang untuk memudahkan navigasi dan akses data, dengan menyediakan fitur-fitur seperti grafik interaktif, tabel data, dan filter pencarian agar pengguna dapat dengan mudah mengeksplorasi data eksoplanet secara detail.
2.3.1 Desain Sistem
     Desain sistem website ini diawali dengan pembuatan arsitektur perangkat lunak yang menggabungkan ReactJS sebagai frontend dan Flask sebagai backend. ReactJS memudahkan pengembangan antarmuka pengguna yang interaktif dan responsif dengan struktur berbasis komponen, sehingga setiap fitur seperti grafik, navigasi, dan detail planet dapat dikembangkan secara modular dan dapat dipelihara dengan mudah. Selain itu, ReactJS menyediakan dukungan untuk state management yang membantu dalam pengelolaan data dinamis di dalam aplikasi. Flask berperan menyediakan API yang melayani permintaan data dari frontend dan mengelola logika bisnis serta akses database.
     Lebih lanjut, desain antarmuka pengguna memperhatikan aspek user experience (UX) yang menjadi salah satu faktor penting dalam penggunaan aplikasi berbasis data. Dengan mengambil pendekatan desain yang intuitif dan minimalis, pengguna dapat dengan mudah memahami tampilan visualisasi data eksoplanet. Jurnal dari Universitas Lancang Kuning (Unilak) (2023) menekankan pentingnya desain UI yang responsif dan interaktif untuk meningkatkan keterlibatan pengguna, terutama dengan mengimplementasikan fitur-fitur seperti zoom pada grafik, tooltip yang menampilkan informasi detail saat pointer diarahkan ke elemen tertentu, dan filter data yang memudahkan pengguna dalam menyesuaikan tampilan visualisasi sesuai kebutuhan.
2.3.2 Implementasi dan Pengembangan
     Proses implementasi website dimulai dengan pengembangan backend menggunakan Flask, yang membangun RESTful API untuk menyediakan data eksoplanet dalam format JSON. API ini mengelola berbagai endpoint yang dapat diakses oleh frontend, seperti data daftar eksoplanet, detail planet tertentu, serta fitur pencarian dan filter. Data awalnya diambil dari dataset lokal yang kemudian akan dikembangkan agar dapat diintegrasikan dengan sumber data eksternal seperti NASA Exoplanet Archive, sesuai dengan kebutuhan data terkini dan akurasi yang dibutuhkan dalam aplikasi.
     Pada sisi frontend, ReactJS mengonsumsi API yang telah disediakan oleh Flask dan menampilkan data secara interaktif. Komponen React dikembangkan untuk menampilkan grafik visualisasi seperti scatter plot, histogram, dan peta yang memungkinkan pengguna mengeksplorasi data eksoplanet secara visual. Penerapan state management dan lifecycle methods React membantu menjaga performa aplikasi tetap optimal saat pengguna melakukan interaksi seperti zooming, filtering, dan navigasi antar halaman. Implementasi ini juga memperhatikan penggunaan library chart seperti Recharts atau D3.js untuk menghasilkan visualisasi yang menarik dan mudah dipahami.
2.3.3 Pengujian Sistem
     Pengujian sistem dilakukan secara komprehensif untuk memastikan seluruh fungsi aplikasi berjalan dengan baik dan memenuhi kebutuhan pengguna. Pengujian fungsional dilakukan untuk memverifikasi setiap fitur berjalan sesuai spesifikasi, mulai dari pemanggilan API, tampilan data, hingga interaksi grafik. Selain itu, pengujian performa dilakukan untuk mengevaluasi kecepatan respons dan kestabilan sistem ketika memproses data dalam jumlah besar, sehingga pengalaman pengguna tetap lancar dan tidak terganggu oleh keterlambatan loading.
     Selain aspek teknis, pengujian juga mencakup usability testing yang fokus pada kemudahan penggunaan aplikasi. Melalui pengujian ini, diperoleh umpan balik dari pengguna terkait desain antarmuka, kemudahan navigasi, dan efektivitas fitur interaktif dalam membantu eksplorasi data eksoplanet. Berdasarkan hasil pengujian, dilakukan perbaikan pada beberapa bagian, seperti penambahan loading indicator saat data sedang dimuat dan penyempurnaan responsivitas antarmuka agar dapat berjalan dengan baik pada perangkat desktop maupun mobile.
2.3.4 Pemeliharaan dan Pengembangan Selanjutnya
     Pemeliharaan aplikasi dilakukan secara berkala untuk memastikan aplikasi tetap berfungsi optimal dan mampu menyesuaikan dengan perkembangan teknologi serta kebutuhan pengguna. Pemeliharaan ini mencakup perbaikan bug, update data, dan penyesuaian API sesuai dengan perubahan pada sumber data eksternal. Dengan pemeliharaan yang konsisten, aplikasi diharapkan dapat terus memberikan layanan visualisasi data eksoplanet yang akurat dan dapat diandalkan.
     Pengembangan lanjutan diarahkan untuk memperkaya fitur aplikasi, seperti integrasi data real-time, penambahan visualisasi yang lebih kompleks, serta peningkatan performa aplikasi. Selain itu, pengembangan juga akan fokus pada peningkatan UI/UX agar lebih responsif dan menarik, termasuk penerapan desain adaptif untuk berbagai perangkat dan penambahan fitur sosial seperti berbagi hasil visualisasi. Pendekatan ini sejalan dengan rekomendasi dari jurnal Unilak (2023) yang menyatakan bahwa pengembangan berkelanjutan sangat diperlukan untuk menjaga relevansi dan daya saing aplikasi berbasis web.

2.3    Web Development
     Web development atau pengembangan web merupakan proses pembuatan dan pemeliharaan situs web dan aplikasi berbasis web. Proses ini mencakup berbagai aspek, mulai dari desain antarmuka pengguna hingga implementasi logika di sisi server. Web development secara umum terbagi menjadi dua bagian utama, yaitu pengembangan frontend dan backend.
     Frontend development berkaitan dengan elemen yang langsung berinteraksi dengan pengguna, seperti tampilan visual, navigasi, dan interaktivitas halaman. Teknologi yang umum digunakan untuk pengembangan frontend meliputi HTML, CSS, dan JavaScript, serta berbagai framework modern seperti ReactJS, Vue.js, dan Angular yang memungkinkan pengembangan antarmuka pengguna yang dinamis dan responsif. Sementara itu, backend development mencakup logika sistem, manajemen basis data, dan pengelolaan server(Qiu et al. 2024). Backend bertanggung jawab dalam memproses permintaan pengguna, mengakses data, dan mengembalikan respons dalam bentuk yang dapat ditampilkan oleh frontend. Teknologi backend yang populer antara lain PHP, Node.js, dan Python, dengan berbagai framework seperti Django dan Flask.
2.4  Library Untuk Penelitian
     Dalam pengembangan aplikasi website visualisasi interaktif data exoplanet, penggunaan berbagai library dan pustaka eksternal menjadi hal penting untuk mempercepat proses pengembangan serta meningkatkan performa dan fungsionalitas aplikasi. Library yang digunakan dalam proyek ini meliputi berbagai kategori seperti pengelolaan antarmuka pengguna, visualisasi data, manajemen state, koneksi ke backend, hingga pengujian. Beberapa library yang biasa digunakan dalam pengembangan aplikasi web adaalh sebagai berikut:
- Visualisasi Data dan Grafik
* chart.js dan react-chartjs-2: Digunakan untuk menampilkan data exoplanet dalam bentuk grafik interaktif seperti scatter plot dan line chart. react-chartjs-2 adalah binding React untuk chart.js yang memungkinkan integrasi yang lebih mudah dalam komponen React.
* chartjs-chart-error-bars: Digunakan untuk menambahkan fitur error bars pada grafik, yang penting dalam representasi data ilmiah seperti pengukuran massa atau radius exoplanet.
* three: Merupakan library JavaScript untuk membuat dan merender grafik 3D di browser. Dalam konteks ini, dapat digunakan untuk visualisasi ruang angkasa atau sistem bintang secara interaktif.
-  Manajemen State dan Penyimpanan Data
* @reduxjs/toolkit, react-redux: Digunakan untuk mengelola state global dalam aplikasi React, terutama dalam pengelolaan data exoplanet yang perlu diakses oleh berbagai komponen.
* redux-thunk: Middleware untuk Redux yang memungkinkan penanganan logika asynchronous, seperti pengambilan data dari API.
* redux-persist: Digunakan untuk menyimpan (persist) state Redux ke penyimpanan lokal seperti localStorage agar data tetap tersedia saat pengguna me-refresh halaman.
-  Interaksi dengan Backend dan Data Parsing
* axios: Library HTTP client berbasis Promise yang digunakan untuk mengambil data dari backend Flask API.
* papaparse: Digunakan untuk parsing file CSV yang mungkin digunakan dalam pengambilan atau konversi data exoplanet dari sumber luar.
-  Framework UI dan Styling
* antd (Ant Design): Merupakan framework antarmuka pengguna yang menyediakan berbagai komponen siap pakai seperti tabel, grafik, tombol, dan formulir dengan desain modern.
* styled-components: Digunakan untuk styling komponen React dengan pendekatan CSS-in-JS, sehingga memungkinkan pembuatan gaya dinamis langsung dalam file JavaScript.
* tailwindcss: Framework utility-first CSS yang mempercepat proses styling dengan class-class siap pakai.
-     Routing dan Navigasi
* react-router-dom: Digunakan untuk mengatur navigasi antar halaman dalam aplikasi React secara efisien, seperti berpindah antara halaman beranda, detail exoplanet, atau grafik visualisasi.
- Testing dan Kualitas Kode
* @testing-library/react, @testing-library/jest-dom, @testing-library/user-event, dan @testing-library/dom: Library yang digunakan untuk melakukan pengujian pada komponen React dan memastikan interaksi berjalan sebagaimana mestinya.
* web-vitals: Digunakan untuk mengukur performa dan pengalaman pengguna berdasarkan metrik-metrik vital seperti kecepatan muat halaman dan respons interaksi.
-     Firebase
* firebase: Library ini digunakan untuk kemungkinan penyimpanan data, autentikasi pengguna, atau layanan cloud lainnya yang disediakan oleh Firebase, tergantung kebutuhan pengembangan.
-    Analisis Data
* regression: Digunakan untuk melakukan analisis regresi terhadap data numerik. Ini bermanfaat dalam menganalisis keterkaitan antar variabel dalam dataset exoplanet, misalnya hubungan antara jarak dan suhu.
2.5 Konsep Arsitektur Perangkat Lunak
     Arsitektur perangkat lunak merupakan struktur fundamental dari suatu sistem perangkat lunak yang terdiri atas komponen-komponen perangkat lunak, hubungan antar komponen tersebut, dan prinsip-prinsip yang mengatur desain dan evolusinya. Arsitektur yang baik mampu meningkatkan skalabilitas, maintainability, dan efisiensi pengembangan sistem. Dalam pengembangan aplikasi berbasis web, arsitektur yang modular dan terpisah dengan baik antara antarmuka pengguna, logika bisnis, dan data sangat penting untuk menjaga fleksibilitas serta kemudahan pemeliharaan di masa depan. Beberapa pendekatan umum dalam arsitektur perangkat lunak meliputi Component-Based Architecture, Model-Driven Architecture (MDA), dan Service-Oriented Architecture (SOA).
     Aplikasi website visualisasi data exoplanet ini mengadopsi pendekatan komponen dan pemisahan tanggung jawab (separation of concerns) secara eksplisit antara frontend dan backend, memanfaatkan kekuatan framework modern seperti ReactJS dan Flask.
2.5.1 Component Based Architecture
     Component-Based Architecture (CBA) adalah pendekatan arsitektur yang membagi sistem perangkat lunak ke dalam komponen-komponen mandiri yang dapat digunakan kembali (reusable), diuji secara terpisah, dan dikembangkan secara modular. Setiap komponen memiliki antarmuka (interface) yang jelas, serta tanggung jawab yang spesifik dan terbatas.
a. Karakteristik Utama:
* Reusability: Komponen dapat digunakan kembali di berbagai bagian aplikasi atau bahkan di aplikasi lain.
* Modularity: Setiap komponen berdiri sendiri dan bertanggung jawab atas satu fungsi tertentu.
* Encapsulation: Detail implementasi tersembunyi, interaksi hanya melalui interface yang disediakan.
* Scalability & Maintainability: Sistem dapat dikembangkan dan diperluas tanpa memengaruhi keseluruhan sistem.
b. Penerapan pada Proyek
Dalam aplikasi ini, arsitektur berbasis komponen diimplementasikan pada:
* Frontend ReactJS:
o Setiap bagian antarmuka (misalnya: ScatterPlot, HistogramPlot, Sidebar, Navbar) merupakan komponen terpisah.
o State dan props digunakan untuk mengelola komunikasi antar komponen.
o Reusabilitas memungkinkan penggunaan ulang komponen di halaman lain (misal: UploadCSV, DataTable, ModalControl).
* Backend Flask:
o Fungsi REST API dibagi dalam blueprint atau modul modular (misal: modul untuk pengambilan data exoplanet, modul analisis CNN).
o Pemisahan antara route, controller, dan service logic.
c. Keuntungan pada Aplikasi Ini:
* Memudahkan pengembangan fitur baru seperti mode split view atau export visualisasi.
* Mempermudah debugging dan pengujian karena tiap komponen dapat diuji secara terpisah.
* Skalabilitas lebih tinggi karena komponen bisa dikembangkan secara paralel.
2.5.2 Model-Driven Engineering (MDE)
Model-Driven Engineering (MDE) merupakan pendekatan rekayasa perangkat lunak yang berfokus pada pembuatan dan manipulasi model-model sebagai artefak utama dalam proses pengembangan perangkat lunak. Dalam MDE, model tidak hanya berperan sebagai dokumentasi, tetapi juga sebagai komponen aktif yang dapat diubah menjadi kode secara otomatis (model-to-code transformation).
MDE memperkenalkan abstraksi tingkat tinggi dalam desain sistem dengan memisahkan logika bisnis dari detail teknis implementasi. Ini sangat bermanfaat untuk sistem yang kompleks, karena meningkatkan konsistensi, mempercepat pengembangan, dan mempermudah pemeliharaan.
a. Konsep Utama MDE:
* Model Sebagai Sumber Kebenaran (Primary Artifact): Model menggambarkan sistem secara formal dan dapat dikompilasi atau diinterpretasikan menjadi sistem nyata.
* Transformasi Model: Proses mengubah model menjadi model lain atau menjadi kode program (Model-to-Model dan Model-to-Text Transformation).
* Metamodeling: Proses mendeskripsikan struktur model dalam kerangka aturan tertentu (contoh: UML sebagai metamodel).
* Platform-Independent Model (PIM) dan Platform-Specific Model (PSM): PIM mendeskripsikan logika sistem tanpa ketergantungan platform, sedangkan PSM menyesuaikan model dengan platform target seperti web, desktop, atau mobile.
b. Implementasi dalam Konteks Aplikasi
Meskipun aplikasi ini tidak sepenuhnya mengadopsi MDE secara otomatis (misalnya belum menggunakan model-to-code generator), prinsip-prinsip MDE tetap diintegrasikan dalam proses perancangan dan dokumentasi sistem:
* Modeling dengan UML: Use Case Diagram, Activity Diagram, dan Component Diagram digunakan untuk merepresentasikan kebutuhan dan struktur sistem.
* Abstraksi Komponen Sistem: Komponen frontend, backend, dan data dipisahkan secara konseptual melalui model desain.
* Dokumentasi dan Validasi Awal: Model digunakan untuk validasi kebutuhan pengguna dan skenario interaksi sebelum implementasi dilakukan.
c. Manfaat Penerapan MDE dalam Proyek
* Memperjelas Struktur Sistem: Visualisasi hubungan antar komponen membantu pemahaman arsitektur.
* Mempermudah Komunikasi: Stakeholder non-teknis dapat memahami alur sistem melalui model.
* Menjadi Basis Pengembangan Lanjutan: Jika dikembangkan lebih lanjut, model dapat menjadi dasar otomatisasi pembuatan kode frontend atau backend.
2.5.3 Service-Oriented Architecture (SOA)
Service-Oriented Architecture (SOA) merupakan paradigma arsitektur perangkat lunak yang berorientasi pada layanan (service) sebagai unit utama pengorganisasian sistem. Layanan dalam SOA adalah komponen perangkat lunak yang dapat diakses melalui jaringan dengan protokol standar (seperti HTTP/HTTPS) dan antarmuka yang terdokumentasi dengan baik, tanpa perlu mengetahui detail implementasinya.
Menurut Erl (2005), SOA didefinisikan sebagai:
"A service-oriented architecture is a form of distributed systems architecture that is typically characterized by the following fundamental design principles: standardized service contract, loose coupling, abstraction, reusability, autonomy, statelessness, discoverability, and composability."
Dengan kata lain, SOA menekankan pada pembentukan sistem terdistribusi yang terdiri atas layanan-layanan mandiri yang longgar keterkaitannya (loosely coupled), dapat digunakan ulang (reusable), dan dapat dikomposisi ulang (composable) untuk memenuhi kebutuhan bisnis tertentu.
 Karakteristik Utama SOA
1. Standardized Service Contract - Setiap layanan mendeklarasikan antarmuka secara eksplisit menggunakan protokol standar seperti REST atau SOAP.
2. Loose Coupling - Layanan bersifat independen dan tidak saling tergantung secara langsung.
3. Reusability - Layanan dirancang untuk digunakan kembali oleh berbagai aplikasi atau klien.
4. Autonomy - Layanan memiliki kontrol penuh terhadap logika internalnya.
5. Statelessness - Layanan tidak menyimpan state antara permintaan satu dengan yang lainnya (kecuali jika diperlukan).
6. Discoverability - Layanan dapat didaftarkan dan ditemukan melalui katalog layanan atau dokumentasi.
7. Composability - Layanan dapat digabungkan untuk membentuk alur kerja atau layanan yang lebih kompleks.
Peran SOA dalam Aplikasi Ini
Dalam konteks aplikasi visualisasi interaktif data exoplanet ini, pendekatan SOA diterapkan pada sisi backend Flask. Setiap endpoint API dirancang sebagai layanan mandiri (service) yang bertanggung jawab atas domain tertentu. Misalnya:
* /api/exoplanets: Menyediakan data exoplanet dari basis data.
* /api/upload: Menerima dan memproses file CSV yang diunggah.
* /api/analysis: Menyediakan hasil analisis atau filtering data.
* /api/auth: Menangani autentikasi dan otorisasi pengguna.
Pendekatan ini memungkinkan frontend ReactJS untuk berinteraksi dengan backend melalui antarmuka RESTful yang terstandarisasi, sesuai prinsip SOA.
 Keunggulan Pendekatan SOA dalam Penelitian
Atribut
Implementasi dalam Aplikasi
Interoperabilitas
Frontend, aplikasi mobile, atau sistem lain dapat mengakses layanan backend melalui HTTP tanpa bergantung pada teknologi backend-nya.
Skalabilitas
Layanan dapat dikembangkan atau diskalakan secara independen. Misalnya, modul analisis statistik dapat ditingkatkan tanpa mengganggu layanan upload atau autentikasi.
Pemeliharaan Mudah
Jika terjadi perubahan pada satu layanan (misalnya /api/analysis), layanan lain tetap dapat berfungsi dengan normal.
Pengujian Modular
Setiap endpoint dapat diuji secara terpisah menggunakan alat seperti Postman atau Swagger.
Integrasi CNN/Machine Learning
Model CNN untuk klasifikasi exoplanet dapat diintegrasikan sebagai layanan terpisah (misalnya /api/predict), tanpa memengaruhi layanan lainnya.
2.5.4 Microservices Architecture
Microservices Architecture adalah pendekatan pengembangan perangkat lunak yang memecah sistem aplikasi menjadi sekumpulan layanan kecil dan mandiri (independent services), di mana setiap layanan menjalankan satu fungsi bisnis spesifik dan dapat dikembangkan, diuji, diterapkan, serta diskalakan secara independen. Arsitektur ini merupakan evolusi langsung dari prinsip-prinsip Service-Oriented Architecture (SOA), tetapi dengan fokus yang lebih granular, desentralisasi, dan otomatisasi dalam pengembangan serta penerapan layanan.
Menurut Newman (2015):
"The microservice architectural style is an approach to developing a single application as a suite of small services, each running in its own process and communicating with lightweight mechanisms, often an HTTP resource API."
Ciri Khas Microservices
1. Layanan Independen - Setiap microservice berjalan sebagai proses terpisah dan memiliki basis data sendiri (database-per-service).
2. Fungsi Tunggal - Setiap microservice bertanggung jawab terhadap satu domain atau kapabilitas bisnis tertentu.
3. Komunikasi Ringan - Komunikasi antar layanan dilakukan melalui protokol ringan seperti HTTP/REST atau pesan asynchronous (MQ).
4. Deployment Terpisah - Setiap layanan dapat di-deploy secara mandiri tanpa memengaruhi layanan lain.
5. Penggunaan Teknologi Beragam - Microservices memungkinkan penggunaan teknologi, framework, dan bahasa pemrograman yang berbeda pada setiap layanan (polyglot programming).
6. Desentralisasi Data dan Governance - Tidak ada pusat kontrol tunggal; layanan bertanggung jawab penuh terhadap data dan prosesnya.
?? Penerapan Microservices dalam Aplikasi Ini
Pada aplikasi visualisasi data exoplanet ini, prinsip-prinsip microservices diadopsi terutama di sisi backend Flask melalui struktur modular berbasis blueprint dan pemisahan fungsi layanan. Contohnya:
Microservice
Deskripsi
Auth Service
Mengelola proses login, registrasi, dan autentikasi token.
Data Service
Mengelola akses dan penyajian data exoplanet dari database.
Upload Service
Menangani unggahan file CSV dan parsing data.
Analysis Service
Memberikan layanan analisis seperti filtering, statistik, regresi, atau klasifikasi.
CNN Inference Service (Opsional)
Jika diintegrasikan, microservice ini menerima data dan mengembalikan hasil prediksi dari model CNN.
Setiap layanan memiliki routing terpisah, logika mandiri, dan dapat dikembangkan serta diuji secara paralel.
 Perbandingan SOA vs Microservices
Aspek
SOA
Microservices
Granularitas
Layanan berskala menengah
Layanan sangat kecil dan spesifik
Teknologi
Cenderung homogen
Bebas (polyglot)
Deployment
Bisa monolitik atau modular
Harus independen
Data
Bisa terpusat
Terdistribusi (data-per-service)
Komunikasi
SOAP/REST
REST/MQ/Event-driven
 Keuntungan dalam Konteks Penelitian
* Pengembangan Paralel: Tim dapat fokus pada pengembangan masing-masing layanan tanpa hambatan integrasi langsung.
* Pemeliharaan Modular: Perubahan pada layanan (misal UploadService) tidak memengaruhi layanan lain seperti DataService.
* Skalabilitas Layanan Khusus: Layanan CNN dapat diskalakan secara independen sesuai kebutuhan komputasi.
* Penerapan DevOps & CI/CD: Setiap layanan dapat diuji dan di-deploy secara otomatis, memudahkan integrasi ke dalam pipeline DevOps.
2.6 RESTful API
RESTful API (Representational State Transfer Application Programming Interface) adalah pendekatan arsitektur komunikasi dalam pengembangan perangkat lunak yang memanfaatkan protokol HTTP untuk pertukaran data antara klien dan server. REST diperkenalkan oleh Roy Fielding dalam disertasinya (2000), dan telah menjadi standar de facto untuk membangun layanan web modern karena kesederhanaannya, skalabilitas, dan interoperabilitasnya.
REST beroperasi dengan prinsip-prinsip utama seperti:
* Statelessness - Setiap permintaan dari klien ke server harus mengandung semua informasi yang dibutuhkan untuk memproses permintaan tersebut. Server tidak menyimpan status sesi klien.
* Client-Server Architecture - Klien dan server dikembangkan secara terpisah, memungkinkan fleksibilitas dalam pengembangan UI maupun backend.
* Uniform Interface - Interaksi dilakukan melalui metode HTTP standar seperti GET (ambil data), POST (buat data), PUT (perbarui data), dan DELETE (hapus data).
* Resource-Based - Entitas (seperti exoplanet, sistem planet, hasil analisis) diakses melalui URL unik yang mewakili resource.
Menurut Fielding (2000), arsitektur REST "mengutamakan antarmuka generik dan dapat diakses melalui URI untuk memperkuat skalabilitas dan interoperabilitas antar sistem."
Implementasi pada Aplikasi Ini
Aplikasi visualisasi interaktif exoplanet ini menerapkan prinsip REST secara langsung melalui struktur backend Flask. Modul Flask dirancang sebagai layanan web yang mengembalikan data dalam format JSON, yang kemudian dikonsumsi oleh antarmuka pengguna berbasis ReactJS. Berikut implementasi teknisnya:
Komponen
Fungsi
Metode HTTP
Endpoint
Modul CSV Exoplanet
Mengirim data exoplanet hasil parsing CSV
GET
/api/exoplanets
Modul Analisis
Menghasilkan hasil klasifikasi CNN atau filter data
POST
/api/analyze
Modul Admin
Menyediakan daftar pengguna, log, dan fitur manajemen
GET, DELETE
/api/admin/users, /api/admin/logs
Setiap respons dikirim dalam bentuk JSON, memudahkan parsing oleh komponen frontend dan menjamin kompatibilitas dengan berbagai jenis klien lainnya.
Manfaat REST dalam Proyek Ini
Prinsip REST
Implementasi dan Keuntungan
Statelessness
Memudahkan debugging, pengujian, dan penskalaan karena tidak ada state yang disimpan di server
Uniform Interface
Komunikasi frontend-backend menjadi lebih terstandar dan terprediksi
Modularity
Tiap endpoint menangani resource spesifik, selaras dengan prinsip pemisahan tanggung jawab
Reusability
REST API dapat dimanfaatkan ulang oleh aplikasi lain seperti mobile app atau sistem analitik terpisah
Hubungan dengan Pendekatan Lain
RESTful API melengkapi pendekatan CBSE dengan menyediakan antarmuka komunikasi standar antar komponen layanan backend dan frontend. REST juga dapat dianggap sebagai dasar implementasi SOA ringan, karena menyediakan layanan modular berbasis web yang dapat digunakan secara interoperabel.
2.7 Software Development Life Cycle (SDLC) dan Metodologi Pengembangan Perangkat Lunak
Pengembangan sistem informasi, termasuk aplikasi visualisasi interaktif data exoplanet ini, memerlukan pendekatan sistematis dan terstruktur. Software Development Life Cycle (SDLC) menyediakan kerangka kerja untuk membangun perangkat lunak dari tahap perencanaan hingga pemeliharaan. Pemilihan metodologi pengembangan yang tepat di dalam SDLC sangat mempengaruhi keberhasilan proyek, baik dari sisi waktu, kualitas, maupun fleksibilitas terhadap perubahan.
2.7.1 SDLC (Software Development Life Cycle)
SDLC adalah proses yang menggambarkan tahapan dalam pembangunan perangkat lunak, meliputi:
1. Analisis Kebutuhan: Mengidentifikasi kebutuhan pengguna dan sistem, seperti jenis data exoplanet, jenis visualisasi (scatter plot, histogram), dan fitur administrasi.
2. Perancangan Sistem (Design): Membuat desain antarmuka (UI), struktur basis data, dan arsitektur frontend-backend.
3. Implementasi (Coding): Menerapkan desain menjadi kode program menggunakan ReactJS untuk frontend dan Flask untuk backend.
4. Pengujian (Testing): Melakukan uji fungsionalitas, integrasi, dan validasi hasil visualisasi serta REST API.
5. Deploy dan Pemeliharaan: Menyediakan aplikasi untuk pengguna akhir dan melakukan pembaruan berdasarkan umpan balik atau perubahan data.
2.7.2 Metodologi Pengembangan: Waterfall vs. Agile
a. Waterfall
Waterfall merupakan pendekatan linier dan terstruktur, di mana setiap tahapan SDLC diselesaikan secara berurutan. Kelebihannya adalah dokumentasi yang rapi dan mudah untuk proyek dengan ruang lingkup yang jelas.
Kelebihan Waterfall
Kekurangan Waterfall
Dokumentasi lengkap
Tidak fleksibel terhadap perubahan
Cocok untuk proyek terdefinisi
Sulit mengakomodasi feedback cepat
b. Agile
Agile adalah pendekatan iteratif dan inkremental, di mana sistem dibangun melalui iterasi (sprint) pendek. Setiap iterasi mencakup proses analisis, desain, implementasi, dan pengujian, memungkinkan respon cepat terhadap perubahan.
Kelebihan Agile
Kekurangan Agile
Adaptif terhadap perubahan
Membutuhkan komunikasi tim intensif
Fokus pada kebutuhan pengguna
Dokumentasi bisa kurang lengkap
2.7.3 Pendekatan yang Digunakan
Dalam proyek ini digunakan pendekatan hybrid: kombinasi dari struktur Waterfall dan fleksibilitas Agile. Penjelasannya:
* Perencanaan awal (analisis kebutuhan, desain arsitektur) dilakukan secara terstruktur ala Waterfall.
* Implementasi frontend-backend, uji fungsi, dan penyesuaian fitur dilakukan dalam iterasi kecil dengan pendekatan Agile, termasuk evaluasi dan penambahan fitur baru berdasarkan feedback pengguna atau dosen pembimbing.

2.5    Python
     Python adalah bahasa pemrograman yang sangat populer dan banyak digunakan dalam penelitian serta pengembangan aplikasi berbasis data. Dalam konteks penelitian ini, Python dipilih karena sintaksisnya yang sederhana dan kemudahan dalam mengimplementasikan algoritma deep learning. Keberadaan banyak pustaka yang mendukung, seperti PyTorch, PyLightcurve-Torch, dan Astropy, memungkinkan peneliti untuk dengan cepat mengembangkan dan menguji model yang diperlukan untuk menghitung parameter orbital planet ekstrasurya (Samsir et al. 2021). Kemampuan Python untuk menangani data dalam jumlah besar dan kompleks menjadikannya pilihan yang ideal untuk proyek ini. Selain itu, dukungan komunitas yang luas dan ketersediaan dokumentasi serta tutorial yang komprehensif membuat proses pengembangan menjadi lebih efisien. Dengan menggunakan Python, peneliti dapat fokus pada implementasi algoritma dan analisis data, tanpa terbebani oleh kerumitan bahasa pemrograman lainnya. Dalam penelitian ini, Python berfungsi sebagai platform utama untuk membangun aplikasi yang mampu menghitung dan memprediksi parameter orbital dengan akurasi tinggi, serta mendukung kolaborasi dengan berbagai pustaka dan framework yang relevan dalam bidang astronomi.
2.6     Aplikasi Website Penelitian
     Aplikasi website penelitian ini dikembangkan dengan menggunakan Python sebagai bahasa pemrograman utama untuk backend, sedangkan antarmuka pengguna (frontend) dirancang menggunakan teknologi berbasis web yang memungkinkan interaksi intuitif.. Backend aplikasi ini diimplementasikan dengan memanfaatkan Flask, framework Python yang memungkinkan pengelolaan API dan proses server secara efisien.
     Frontend aplikasi dirancang untuk memberikan pengalaman pengguna yang sederhana namun efektif. Antarmuka pengguna dikembangkan dengan menggunakan teknologi modern seperti HTML, CSS, dan JavaScript, yang memungkinkan aplikasi ini diakses melalui browser dengan tampilan yang responsif(Asian et al. 2022). Proses pengembangan dilakukan di lingkungan Visual Studio Code, yang menawarkan fitur seperti debugging, integrasi sistem kontrol versi, dan penyelesaian otomatis kode untuk meningkatkan produktivitas pengembang.

2.7    Framework Aplikasi
     Framework yang digunakan dalam pengembangan aplikasi ini adalah kombinasi Flask, Python, React.js, dan MongoDB. Framework ini dipilih karena fleksibilitas, performa tinggi, dan kemudahan integrasi antar komponen, yang mendukung pengembangan aplikasi web berbasis katalog exoplanet secara efektif. Flask digunakan sebagai kerangka kerja backend untuk menangani REST API, memungkinkan frontend untuk berkomunikasi dengan basis data dan analisis data (Karbasizadeh et al. 2024). Python menyediakan dukungan yang kuat untuk pengelolaan data, pemrosesan analitik, manipulasi numerik, serta pembuatan visualisasi interaktif, dengan menggunakan pustaka seperti Pandas, NumPy, SciPy, dan Seaborn..
     React.js digunakan untuk membangun antarmuka pengguna yang dinamis dan responsif. Antarmuka ini dirancang untuk memvisualisasikan data exoplanet, termasuk informasi seperti nama planet, massa, radius, eksentrisitas orbit, dan parameter lain yang relevan. Data ini ditampilkan secara real-time melalui integrasi dengan API yang disediakan oleh backend Flask. React juga mendukung fitur hot reloading, yang memungkinkan pembaruan antarmuka secara instan selama pengembangan (Sarjana et al.).
     Untuk penyimpanan data, aplikasi ini menggunakan MongoDB, basis data NoSQL yang mampu menangani data tidak terstruktur dengan fleksibilitas tinggi. MongoDB memungkinkan penyimpanan data eksoplanet seperti parameter bintang, planet, dan hasil analisis CNN secara efisien (Reddy Narayanaswamy 2021). Integrasi antara Flask dan MongoDB dilakukan menggunakan pustaka PyMongo, memastikan pengelolaan data yang cepat dan andal.
     Aplikasi website ini dirancang untuk membantu peneliti dan pengguna dalam menganalisis serta memvisualisasikan data exoplanet secara interaktif. Data ditampilkan melalui antarmuka visual yang ramah pengguna, memungkinkan eksplorasi dan pemahaman hubungan antara parameter bintang dan planet. Aplikasi ini dikembangkan menggunakan framework ReactJS untuk frontend dan Flask sebagai backend, yang bersama-sama membentuk platform visualisasi berbasis web yang informatif dan mudah diakses.
2.8    Usability
     Usability atau kegunaan merupakan salah satu aspek utama dalam pengembangan sistem berbasis web, khususnya dalam konteks antarmuka pengguna (user interface). Usability mengacu pada sejauh mana suatu sistem dapat digunakan oleh pengguna secara efektif, efisien, dan memberikan rasa puas dalam mencapai tujuan tertentu. Definisi ini mengacu pada standar ISO 9241-11 yang banyak digunakan dalam penelitian dan praktik desain antarmuka. Dalam penelitian yang dilakukan oleh (Olivia dan Ibrahim 2024), usability dievaluasi menggunakan dua metode utama, yaitu User Experience Questionnaire (UEQ) dan System Usability Scale (SUS). UEQ digunakan untuk mengukur pengalaman pengguna secara subjektif terhadap beberapa aspek, seperti daya tarik, kejelasan, efisiensi, keandalan, stimulasi, dan kebaruan dari antarmuka. Hasil dari pengukuran ini menunjukkan bahwa persepsi pengguna terhadap sistem yang diuji masih tergolong rendah, khususnya pada aspek daya tarik, stimulasi, dan kebaruan. Sementara itu, SUS digunakan untuk memberikan skor terhadap kegunaan sistem secara keseluruhan. Skor SUS diperoleh melalui sepuluh pernyataan yang dinilai oleh pengguna dan memberikan gambaran umum tentang seberapa baik sistem tersebut dapat digunakan. Dalam studi tersebut, nilai usability berdasarkan SUS juga menunjukkan hasil yang masih perlu ditingkatkan.
2.9    Responsive Design                      
     Responsive Design adalah pendekatan dalam pengembangan web yang memungkinkan tampilan dan tata letak situs web menyesuaikan secara otomatis dengan berbagai ukuran layar dan perangkat, seperti smartphone, tablet, dan desktop. Tujuannya adalah untuk meningkatkan pengalaman pengguna (user experience) dengan memastikan bahwa konten dan fungsi situs web dapat diakses dan digunakan secara optimal, tanpa bergantung pada jenis perangkat yang digunakan. Menurut (Noorkaran Bhanarkar et al. 2023), filosofi desain web responsif telah mengubah cara penyusunan tampilan situs web, di mana tampilan tidak lagi bersifat statis, melainkan fleksibel sesuai dengan ukuran dan orientasi layar. Dengan semakin meningkatnya jumlah pengguna yang mengakses internet melalui perangkat mobile, kemampuan situs web untuk beradaptasi terhadap berbagai resolusi menjadi sangat penting agar kenyamanan dan kemudahan navigasi tetap terjaga.
     Studi oleh (Rehan Anwar et al. 2021)  menekankan bahwa situs web yang tidak responsif cenderung menyebabkan ketidaknyamanan bagi pengguna. Hasil survei menunjukkan bahwa mayoritas pengguna mengalami kesulitan dalam mengakses konten utama dan fungsi penting pada situs web yang tidak dirancang secara responsif, terutama ketika menggunakan perangkat seluler.
     Dalam pengembangan aplikasi website visualisasi interaktif data exoplanet ini, penerapan prinsip responsive design menjadi elemen krusial. ReactJS, sebagai framework frontend yang digunakan, menawarkan fleksibilitas tinggi dalam membangun antarmuka pengguna yang modular dan mudah disesuaikan. Dukungan terhadap pustaka seperti Tailwind CSS, Bootstrap, atau Material UI memungkinkan penggunaan kelas utilitas dan komponen yang sudah dioptimalkan untuk tampilan responsif. Desain antarmuka disusun dengan menggunakan teknik seperti media queries, sistem grid, serta unit fleksibel seperti vw, vh, dan %, agar elemen visualisasi seperti grafik dan peta bintang tetap terbaca dan berfungsi optimal di berbagai perangkat. Meskipun Flask sebagai backend berfokus pada penyediaan data dan API, efisiensi struktur data yang dikirim juga mendukung performa aplikasi secara keseluruhan, terutama di perangkat dengan keterbatasan sumber daya. Proses pengujian responsivitas dilakukan baik melalui perangkat nyata maupun simulator seperti Chrome DevTools, guna memastikan kompatibilitas dan kenyamanan penggunaan.
2.10  Flowchart
     Flowchart adalah jenis diagram yang menjelaskan suatu proses atau alur kerja secara visual. Biasanya, Flowchart dibuat menggunakan berbagai simbol, yang masing-masing mewakili langkah yang berbeda dalam suatu urutan atau proses. Diagram flowchart biasanya mencakup berbagai elemen, seperti actions, material, service, input, dan outputs (Zalukhu et al. 2023). Ini adalah lambang flowchart:
1. Proses
Simbol ini digunakan untuk mewakili tindakan atau langkah tertentu dalam suatu proses. Biasanya, proses ini digambarkan secara visual sebagai bentuk persegi panjang, yang memberikan batasan yang jelas dan tegas dalam diagram. Proses ini berfungsi sebagai blok penyusun, yang memecah sistem atau prosedur yang rumit menjadi komponen yang mudah dikelola dan dipahami.
2. Terminator
Simbol terminator berbentuk persegi panjang dengan sudut membulat. Simbol ini menandakan titik awal atau akhir aliran proses. Jika digunakan di awal, simbol ini menandai titik awal, dan di akhir, simbol ini menandakan penyelesaian suatu proses.
3. Decision
Simbol decision digunakan untuk menggambarkan titik percabangan dalam suatu proses, di mana keputusan harus dibuat berdasarkan kondisi tertentu. Dengan menggunakan simbol ini, maka ada dua kemungkinan hasil: "ya" atau "tidak." Simbol keputusan biasanya direpresentasikan sebagai berlian.
4. Input/Output
Ketika ingin memvisualisasikan input atau output data dalam aliran proses, Maka simbol input/output akan digunakan. Simbol ini menggambarkan interaksi dengan data yang masuk atau keluar dari suatu proses. Contoh diagram alir dalam bentuk simbol input/output sering kali menyertakan jajaran genjang.
5. Predefine Process
Langkah berikutnya adalah memahami diagram yang menggunakan simbol proses yang telah ditentukan. Simbol ini menggambarkan langkah-langkah yang telah dirancang dan ditentukan secara cermat sebelumnya. Langkah-langkah tersebut tidak dapat diinterpretasikan ulang atau diubah selama proses berlangsung.
6. Dokumen
Simbol dokumen digunakan untuk merepresentasikan dokumen atau laporan dalam sebuah proses. Melalui simbol ini, data, dokumen, atau catatan yang terkait dengan sistem atau proses dapat digambarkan.
7. Preparation
Simbol persiapan biasanya digunakan untuk menunjukkan langkah-langkah awal atau persiapan sebelum alur kerja atau proses dimulai. Persiapan ini dapat mencakup pengaturan alur kerja, pengumpulan data awal, atau tugas lain yang diperlukan sebelum langkah berikutnya dijalankan.
8. Manual Preparation
Simbol ini menunjukkan langkah-langkah yang harus dilakukan secara manual oleh operator. Langkah-langkah tersebut biasanya melibatkan tindakan yang tidak dapat diotomatisasi dan memerlukan interaksi langsung.
9. On-Page Reference
Simbol On-Page Reference digunakan untuk menghubungkan bagian-bagian dari diagram alir pada halaman yang sama. Simbol ini membantu menghindari pengulangan instruksi dan mengacu pada langkah-langkah yang sudah ditentukan di halaman tersebut.
10. Off-Page Reference
Simbol ini berfungsi sebagai pasangan dari On-Page Reference. Simbol ini digunakan untuk menghubungkan bagian-bagian dari diagram alir yang terdapat pada halaman yang berbeda.
11. Display
Simbol Display berfungsi untuk menunjukkan informasi yang akan disajikan. Informasi ini dapat berupa pesan, data, atau informasi penting lain yang memberikan panduan terkait status atau tindakan yang diperlukan.
12. Flow
Simbol ini juga dikenal sebagai garis penghubung karena merepresentasikan aliran  langkah-langkah atau tindakan dalam suatu proses.
Keberadaan simbol Flow memberikan instruksi konkret yang perlu dijalankan, seperti pemrosesan data, pengambilan keputusan, atau langkah-langkah lain yang membentuk alur kerja.
Berikut beberapa simbol-simbol standar yang digunakan dalam flowchart:

Simbol
Nama
Fungsi


Proses
Untuk Menunjukkan langkah atau aktivitas yang sedang dilakukan dalam suatu proses.


Decision
Untuk Menunjukkan pengambilan keputusan dalam proses


Input/Output
Untuk Menunjukkan aktivitas menerima input atau menghasilkan output.


Document
Untuk Menunjukkan dokumen yang dihasilkan atau digunakan dalam proses.


On-Page Reference
Untuk Menunjukkan koneksi ke bagian lain dari flowchart yang berada di halaman yang sama.


Off-Page Reference
Untuk Menunjukkan koneksi ke bagian lain dari flowchart yang berada di halaman yang berbeda.



Display
Untuk Menunjukkan tampilan informasi pada layar atau alat tertentu.



Flow
Untuk Menunjukkan arah aliran proses atau hubungan antara langkah-langkah dalam flowchart.
Tabel 2. 1 Komponen Flowchart
     Dalam penelitian ini, flowchart memiliki peran penting dalam menjelaskan alur penelitian yang akan dipaparkan pada Bab 3 (Metode Penelitian). Simbol-simbol standar flowchart pada tabel 2.1 akan dijadikan acuan dalam pembuatan alur penelitian untuk memastikan bahwa setiap proses yang terlibat dapat diilustrasikan dengan jelas dan logis. 

2.11 UML (Unified Modelling Language)
     Unified Modeling Language (UML) adalah bahasa permodelan visual multifungsi yang digunakan untuk menentukan, memvisualisasikan, mengonstruksi, dan mendokumentasikan struktur perangkat lunak. UML memiliki peran yang sangat penting dalam membantu pengembang serta pemangku kepentingan untuk memahami, mendesain, mengonfigurasi, dan mengontrol informasi terkait sistem yang akan dibangun (Seidl et al.). Melalui diagram UML, pengembang dapat memvisualisasikan kebutuhan sistem dengan jelas, sehingga baik pengembang maupun pengguna dapat memperoleh gambaran tentang bagaimana sistem akan berfungsi. Dalam penelitian ini, UML digunakan untuk memvisualisasikan hasil analisis sistem dalam pengembangan aplikasi katalog exoplanet. Diagram-diagram yang disusun nantinya akan menjadi panduan bagi pengembang dalam mendesain dan membangun aplikasi ini. Beberapa diagram UML yang akan digunakan dalam penelitian ini antara lain Use Case Diagram, Class Diagram, dan Activity Diagram.
2.11.1 Use Case Diagram
     Use Case adalah teknik analisis kebutuhan yang menggambarkan interaksi antara aktor eksternal dengan sistem. Diagram ini memberikan narasi deskriptif tentang bagaimana pengguna berinteraksi dengan sistem dan menjelaskan fungsionalitas utama dari perspektif pengguna akhir (Ramdany et al.). Model use case memodelkan fungsionalitas sistem seperti yang dirasakan oleh pengguna, yang disebut aktor. Use case sendiri merupakan unit fungsionalitas yang dinyatakan sebagai transaksi antara aktor dan sistem. Tujuan utama dari use case adalah untuk memetakan aktor-aktor dan use case-use case, serta menunjukkan aktor mana saja yang berperan dalam masing-masing use case (Musthofa dan Adiguna 2022). Berikut adalah rancangan Use Case Diagram yang telah dibuat untuk sistem yang dibangun, yang memuat beberapa komponen standar dalam penerapan use case diagram:
No.
Nama Komponen
Notasi UML
Fungsi
1.
Actor

Untuk mewakili entitas eksternal dan menjelaskan peran.
2.
Use Case

Untuk menggambarkan fungsionalitas spesifik dari suatu sistem yang memberikan nilai (value) kepada actor
3.
Association

Untuk Menghubungkan Actor dan Use Case
4.
       Generalisation

Untuk menunjukkan bahwa satu actor atau use case mewarisi perilaku atau fitur dari actor atau use case lainnya.
5.
    <<Include>>

hubungan dalam use case diagram yang menunjukkan bahwa satu use case selalu mencakup fungsionalitas dari use case lain
6.
      <<Extend>>

hubungan dalam use case diagram yang menunjukkan bahwa sebuah use case tambahan atau opsional dapat menyempurnakan atau memperluas fungsionalitas dari use case lain dalam kondisi atau situasi tertentu.

                  Tabel 2.2 Komponen dan Relasi Use Case Diagram (Ramdany et al.)
     Use Case Diagram memiliki peran penting dalam memetakan interaksi antara pengguna dan sistem pada aplikasi katalog exoplanet. Diagram ini digunakan untuk menggambarkan hubungan antara berbagai jenis pengguna aplikasi (aktor) dengan fitur-fitur sistem (use case). Mengingat setiap jenis pengguna memiliki pola interaksi yang berbeda dengan sistem, diagram ini membantu dalam mengidentifikasi fitur-fitur spesifik yang dapat diakses oleh masing-masing pengguna. Dengan demikian, Use Case Diagram memberikan panduan yang jelas dalam pengembangan dan implementasi fitur-fitur aplikasi katalog exoplanet.
2.11.2 Activity Diagram
     Activity Diagram menggambarkan aktivitas-aktivitas komputasional yang terlibat dalam menjalankan sebuah sistem. Setiap activity merepresentasikan sebuah langkah dalam pekerjaan atau eksekusi dari sebuah operasi tertentu. Dalam Activity Diagram, biasanya digunakan swimlanes untuk mengelompokkan aktivitas-aktivitas tersebut ke dalam wilayah tertentu yang dipisahkan oleh garis, berdasarkan pihak yang bertanggung jawab atas aktivitas tersebut (Nistrina dan Sahidah). Dalam pengembangan aplikasi katalog exoplanet, Activity Diagram digunakan untuk memodelkan alur proses utama, seperti pencarian data exoplanet, pengelompokan berdasarkan kriteria tertentu, dan pengelolaan informasi detail exoplanet. Diagram ini membantu dalam memvisualisasikan alur kerja sistem secara keseluruhan. Beberapa komponen yang digunakan dalam Activity Diagram adalah:
        Tabel 2.3 Komponen Untuk Activity Diagram (Nistrina dan Sahidah)
No.
Nama Komponen
Notasi dan Tujuan
1.
Initial State

Memulai alur aktivitas
2.
Final State

Mengakhiri Alur Aktivitas
3.
Decision Node

Untuk Percabangan Logika
4.
Swimlanes

Membagi aktivitas ke dalam kolom atau baris, di mana setiap kolom atau baris mewakili tanggung jawab dari aktor, unit, atau sistem tertentu.
5.
Action State

Untuk merepresentasikan aktivitas spesifik
6.
Control Flow

Untuk menggambarkan aliran atau transisi antara satu elemen ke elemen lainnya

     Pada penelitian ini, Activity Diagram berperan untuk memetakan alur kerja dari setiap fitur pada aplikasi katalog exoplanet. Komponen-komponen dalam Activity Diagram, seperti transition, decision, swimlanes, dan lainnya, mempermudah pembaca maupun pengembang dalam memahami alur kerja suatu fitur. Dengan memanfaatkan Activity Diagram, alur kerja fitur menjadi lebih mudah dipahami, baik oleh pengembang sebagai panduan dalam pengembangan aplikasi maupun oleh pemangku kepentingan lainnya untuk memahami alur fitur sistem. Hal ini akan memfasilitasi komunikasi yang lebih efektif serta implementasi yang lebih efisien selama proses pengembangan sistem.
2.12 UI/UX Design
     UI/UX Design adalah elemen krusial dalam pengembangan aplikasi mobile, website, atau platform daring lainnya. Desain UI/UX berperan signifikan dalam menentukan tingkat ketertarikan dan kenyamanan pengguna saat berinteraksi dengan sebuah aplikasi. Meskipun merupakan dua konsep yang berbeda, UI (User Interface) dan UX (User Experience) memiliki hubungan yang erat dan saling melengkapi.
2.12.1 User Interface (UI) Design
     UI Design mengacu pada proses merancang elemen visual dan interaktif dari produk digital, seperti aplikasi mobile atau website, yang memungkinkan interaksi dengan pengguna. Proses ini mencakup pembuatan antarmuka yang estetis, intuitif, dan mudah digunakan untuk memberikan pengalaman pengguna yang positif. Tujuan utama dari UI Design adalah menciptakan antarmuka yang menarik, fungsional, dan ramah pengguna, sehingga mempermudah navigasi dan interaksi dengan produk (Sarjana et al.).
     Dalam pengembangan aplikasi katalog exoplanet, desain UI berperan penting dalam menggambarkan rancangan visual aplikasi sebelum diimplementasikan ke dalam kode. Pendekatan ini memisahkan tahap desain antarmuka dari implementasi teknis, memberikan panduan visual yang jelas bagi pengembang untuk memastikan bahwa setiap elemen desain sesuai dengan kebutuhan sebelum tahap pengkodean dimulai (Sarjana et al.). Dengan cara ini, UI Design membantu menjaga keselarasan antara konsep desain dan hasil akhir, serta mendukung proses pengembangan aplikasi yang lebih efisien dan terorganisir.

Gambar 2. 2 Contoh UI Design
                            
                             
2.12.2 User Experience (UX) Design
     UX Design mengacu pada proses merancang produk atau layanan digital dengan fokus pada kebutuhan, preferensi, dan perilaku pengguna. Tujuan utama dari UX Design adalah menciptakan pengalaman pengguna yang intuitif, menyenangkan, dan mampu memenuhi kebutuhan serta ekspektasi mereka (Sarjana et al.). Berbeda dengan UI Design, yang lebih berorientasi pada elemen visual, UX Design mencakup pendekatan yang lebih menyeluruh untuk memastikan bahwa seluruh interaksi pengguna dengan aplikasi berjalan lancar dan logis.
     Dalam pengembangan aplikasi katalog exoplanet, UX Design akan memastikan bahwa fitur-fitur aplikasi tidak hanya terlihat menarik, tetapi juga mudah diakses dan sesuai dengan kebutuhan pengguna, baik untuk astronom amatir, pelajar, maupun peneliti. Proses desain ini memastikan pengalaman pengguna dalam menjelajahi katalog exoplanet, mencari informasi, hingga memvisualisasikan data berlangsung mulus tanpa hambatan, sehingga meningkatkan kepuasan pengguna dan efisiensi dalam mengakses informasi.

Gambar 2. 3 Alur Proses UX Design
2.13  Flask
     Flask adalah framework web open-source berbasis Python yang digunakan untuk membangun aplikasi full-stack atau backend. Pengembangan aplikasi katalog eksoplanet menggunakan Flask memungkinkan pengelolaan server, API, dan integrasi dengan berbagai teknologi frontend dan database secara fleksibel. Flask memiliki sifat ringan (microframework), sehingga pengembang dapat menyesuaikan komponen yang digunakan sesuai kebutuhan, tanpa terikat pada struktur tertentu.
     Salah satu keunggulan Flask adalah kemudahan dalam membangun API RESTful untuk mengelola data eksoplanet. Dengan Flask, backend dapat menangani request dan response secara efisien, termasuk integrasi dengan machine learning model seperti CNN (Convolutional Neural Network) untuk analisis data eksoplanet. Flask juga mendukung berbagai database, seperti SQL (menggunakan SQLite atau PostgreSQL) maupun NoSQL (menggunakan MongoDB), untuk menyimpan data eksoplanet secara efisien.
     Flask dapat diintegrasikan dengan frontend modern seperti React atau Vue.js untuk membangun antarmuka pengguna yang dinamis dan responsif. Frontend menangani visualisasi data eksoplanet, sementara Flask berfungsi sebagai penghubung antara frontend dan database. Dengan Flask, pengembang memiliki kebebasan untuk menggunakan berbagai library dan ekstensi Python, seperti Flask-SQLAlchemy untuk pengelolaan database atau Flask-Cors untuk mendukung komunikasi lintas domain.

Gambar 2. 4 Framework Flask
2.14  REST API
     Application Programming Interface (API) adalah sebuah antarmuka yang memungkinkan integrasi data serta menghubungkan aplikasi-aplikasi yang berjalan pada platform yang berbeda (Naufal et al.). Misalnya, terdapat aplikasi web dan mobile yang berbeda, kedua aplikasi tersebut dapat menggunakan data yang sama, saling terhubung, dan terintegrasi. API juga dapat membantu proses pengembangan dengan menyediakan fungsi-fungsi secara terpisah sehingga pengembang tidak perlu lagi membuat fungsi yang sama secara berulang.
     Representational State Transfer (REST) merupakan gaya arsitektur untuk berkomunikasi antar sistem menggunakan protokol Hypertext Transfer Protocol (HTTP) dalam proses pertukaran informasi. Pada REST API, client akan memberikan request menggunakan suatu fungsi HTTP pada suatu endpoint. Kemudian, server akan menerima request tersebut dan mengembalikan sebuah response berbentuk JSON yang nantinya akan diterima oleh client. Di antara berbagai jenis arsitektur API yang ada, REST API mampu mencapai tingkat popularitas yang signifikan (Simbulan dan Aryanto 2024). Dalam membangun sebuah REST API, terdapat beberapa bahasa pemrograman ataupun framework yang dapat digunakan seperti Flask menggunakan bahasa Python, ExpressJS menggunakan JavaScript, ataupun Spring Boot menggunakan Java.
     Untuk aplikasi katalog eksoplanet, REST API digunakan untuk mengakses dan mengambil data terkait eksoplanet, seperti nama planet, massa, jarak dari bintang, serta parameter lainnya, melalui request HTTP ke server yang menyediakan data tersebut. Dengan menggunakan REST API, aplikasi katalog eksoplanet dapat mengakses data secara real-time dan memperbarui informasi yang ditampilkan di antarmuka pengguna baik pada aplikasi web maupun mobile.
     REST API menjadi solusi untuk memastikan aplikasi katalog eksoplanet dapat terintegrasi sepenuhnya. Artinya, seluruh aplikasi yang berjalan pada platform yang berbeda, seperti web dan mobile, dapat saling terhubung dan berbagi data yang sama. Ketika data eksoplanet baru ditambahkan atau diperbarui, perubahan tersebut dapat langsung ditampilkan pada aplikasi pengguna.

Gambar 2. 5 Alur Kerja REST API
2.15  Metode Waterfall
     Metode Waterfall, juga dikenal sebagai model Linear Sequential atau siklus hidup perangkat lunak klasik, merupakan pendekatan terstruktur dalam pengembangan perangkat lunak yang menggambarkan proses secara berurutan dan sistematis (Saravanos dan Curinga 2023) . Sebagai bagian dari Software Development Life Cycle (SDLC), metode Waterfall membagi proses pengembangan perangkat lunak menjadi beberapa tahapan yang harus dilalui secara berurutan, di mana setiap tahapan harus diselesaikan sebelum melanjutkan ke tahap berikutnya. Metode ini sangat sesuai digunakan untuk proyek pengembangan perangkat lunak yang memiliki persyaratan yang jelas dan tidak banyak berubah  (Saravanos dan Curinga 2023) .Tahapan-tahapan dalam metode Waterfall adalah sebagai berikut:
1. Analisis Kebutuhan: Pada tahap ini, informasi dikumpulkan untuk memahami kebutuhan baik dari sisi perangkat lunak maupun pengguna. Data yang diperoleh dapat berupa hasil observasi, survei, atau wawancara. Setelah data terkumpul, dilakukan analisis untuk menentukan spesifikasi kebutuhan perangkat lunak yang akan dikembangkan.
2. Desain Sistem: Di tahap ini, desain sistem dirancang secara menyeluruh untuk memberikan gambaran umum mengenai langkah-langkah yang perlu diambil dalam pengembangan.
3. Implementasi Sistem: Pada tahap ini, perangkat lunak dikembangkan menggunakan bahasa pemrograman dan basis data sesuai dengan hasil analisis kebutuhan dan desain sistem yang telah disusun pada tahapan sebelumnya.
4. Pengujian Sistem: Di tahap ini, sistem diuji untuk memastikan apakah berjalan dengan baik dan memenuhi kebutuhan, serta untuk mendeteksi adanya masalah atau bug yang perlu diperbaiki.
5. Pemeliharaan Sistem: Pada tahap ini, sistem akan dipelihara secara berkala untuk meningkatkan efektivitas dan melakukan penambahan fitur yang dibutuhkan oleh pengguna

Gambar 2. 6 Alur Kerja Model Waterfall
2.16  Black Box Testing
     Black box testing adalah pendekatan pengujian perangkat lunak yang fokus pada pengujian fungsi dan perilaku aplikasi dari perspektif pengguna tanpa mempertimbangkan kode sumber atau struktur internal aplikasi tersebut (Karbasizadeh et al. 2024). Dalam konteks pengembangan aplikasi katalog eksoplanet, pengujian ini bertujuan untuk memastikan bahwa semua fitur yang telah dirancang, seperti pencarian eksoplanet berdasarkan kriteria tertentu, tampilan informasi yang akurat, serta navigasi antar halaman, berjalan sesuai dengan harapan. Pengujian dilakukan dengan memberikan input yang relevan ke dalam aplikasi dan memverifikasi apakah output yang dihasilkan sesuai dengan yang diinginkan, sesuai dengan spesifikasi dan kebutuhan pengguna.
     Metode black box testing sangat penting dalam memastikan aplikasi katalog eksoplanet dapat berfungsi dengan baik, terutama ketika aplikasi tersebut melibatkan data eksternal yang bersumber dari berbagai arsip dan database ilmiah. Tanpa melihat kode internal, penguji hanya memfokuskan diri pada validitas data yang disajikan dan pengalaman pengguna secara keseluruhan. Hal ini memungkinkan pengujian aplikasi yang lebih menyeluruh dalam berbagai skenario yang relevan dengan cara aplikasi akan digunakan dalam kondisi nyata, sehingga bisa memastikan bahwa aplikasi akan memberikan informasi yang akurat dan berguna kepada pengguna.
     Dengan menerapkan black box testing, aplikasi katalog eksoplanet dapat diuji dari sisi fungsionalitas untuk mengidentifikasi adanya kesalahan atau kekurangan dalam sistem, seperti kesalahan dalam pengambilan data, tampilan yang tidak sesuai, atau navigasi yang membingungkan. Pengujian ini juga membantu dalam mendeteksi potensi masalah yang mungkin tidak terlihat dalam tahap pengembangan kode, namun dapat memengaruhi pengalaman pengguna secara keseluruhan. Oleh karena itu, black box testing menjadi langkah penting dalam meningkatkan kualitas dan keandalan aplikasi katalog eksoplanet sebelum diterapkan untuk penggunaan publik.

Gambar 2. 7 Alur Kerja Black Box Testing
2.17  Benchmark
     Benchmarking adalah proses evaluasi yang digunakan untuk mengukur kinerja sistem atau aplikasi dalam berbagai aspek, dengan tujuan untuk membandingkan hasil pengujian terhadap standar atau sistem lain yang serupa. Benchmark sering digunakan untuk mengukur berbagai parameter penting, seperti kecepatan, efisiensi, dan responsivitas suatu aplikasi (Xu et al. 2024). Proses ini dapat melibatkan pengujian terhadap waktu eksekusi, penggunaan sumber daya, dan kemampuan aplikasi untuk menangani beban kerja tertentu. Benchmark juga digunakan untuk memastikan bahwa sistem yang diuji berfungsi sesuai dengan harapan dan dapat menangani berbagai kondisi secara efektif, baik dalam hal performa maupun kualitas (Xu et al. 2024).
     Dalam pengembangan aplikasi katalog eksoplanet, benchmark berfungsi untuk memastikan bahwa aplikasi mampu memberikan pengalaman pengguna yang optimal dengan memproses data secara cepat dan efisien. Pengujian benchmark dilakukan untuk mengukur waktu respons aplikasi ketika pengguna mencari informasi terkait eksoplanet, mengakses detail data, atau melakukan filter pencarian berdasarkan parameter tertentu. Selain itu, benchmark juga digunakan untuk mengevaluasi kinerja aplikasi dalam memproses dan menampilkan data yang besar, yang sering kali melibatkan informasi dari berbagai sumber seperti arsip ilmiah atau database eksoplanet.

2.18  Penelitian Terkait
     Dalam penulisan penelitian ini, penulis merujuk dan menggunakan beberapa penelitian terdahulu sebagai sumber referensi, yaitu:
Tabel 2.4 Ringkasan penelitian terdahulu
No.
:
1
Penulis
:
(Ubaform dan Iswari)
Judul
:
Penerapan React JS Pada Pengembangan FrontEnd Aplikasi Startup Ubaform
Metode 

Penerapan React JS sebagai library JavaScript untuk membangun SPA pada frontend aplikasi Ubaform. Pengembangan dilakukan dengan fokus pada peningkatan performa akses data dan rendering halaman, serta pemanfaatan berbagai package pendukung untuk mempermudah proses pengembangan antarmuka pengguna.
Hasil

Implementasi React JS dalam pengembangan frontend Ubaform berhasil meningkatkan kecepatan rendering halaman dan performa akses data. Selain itu, penggunaan React JS memberikan kemudahan bagi pengembang dalam membangun antarmuka pengguna yang interaktif dan responsif, serta mengurangi waktu dan biaya dalam proses pengembangan.
Judul

Pengembangan Aplikasi Berbasis Web dengan Python Flask untuk Klasifikasi Data Menggunakan Metode Decision Tree C4.5
Penulis



Alan Chandra Darmawan, Lizda Iswari

Tahun Terbit

2022
Masalah

Kebutuhan akan aplikasi berbasis web yang dapat mengklasifikasikan data secara efektif menggunakan algoritma machine learning, khususnya Decision Tree C4.5, untuk menghasilkan informasi yang berguna dari data yang diunggah oleh pengguna.
Tujuan



Mengembangkan aplikasi berbasis web menggunakan Python Flask yang mengimplementasikan algoritma Decision Tree C4.5 untuk klasifikasi data, serta menyediakan output berupa pohon keputusan, laporan klasifikasi, dan matriks konfusi guna membantu pengguna dalam menganalisis data mereka.

Metode Penelitian

Studi kasus dilakukan dengan mempelajari dan memahami aplikasi WEKA sebagai referensi. Pengembangan aplikasi dilakukan menggunakan Python Flask sebagai framework backend, dengan fokus pada implementasi algoritma Decision Tree C4.5 untuk klasifikasi data. Sistem dirancang agar pengguna dapat mengunggah file data, yang kemudian diproses untuk menghasilkan pohon keputusan dan laporan klasifikasi.
Hasil

Aplikasi yang dikembangkan berhasil mengklasifikasikan data yang diunggah oleh pengguna menggunakan algoritma Decision Tree C4.5. Sistem mampu menghasilkan output berupa pohon keputusan, laporan klasifikasi, dan matriks konfusi, yang dapat dimanfaatkan oleh pengguna sesuai dengan kebutuhan mereka.
Judul

Development of Front-End Web Applications Utilizing Single Page Application Framework and React.js Library
Penulis

Jonathan, R., & Suprihadi
Tahun Terbit

2023
Masalah



Pengembangan aplikasi web frontend yang sering mengalami masalah performa dan pengalaman pengguna yang kurang optimal pada aplikasi multi-page tradisional.

Tujuan

Membangun aplikasi web frontend menggunakan framework Single Page Application (SPA) dengan library React.js untuk meningkatkan performa, responsivitas, dan pengalaman pengguna.
Metode Penelitian

Studi pengembangan aplikasi dengan implementasi React.js sebagai library JavaScript untuk SPA. Metode ini meliputi pengujian performa dan evaluasi pengalaman pengguna pada aplikasi yang dibuat.
Hasil

Penggunaan React.js dan pendekatan SPA berhasil meningkatkan kecepatan loading halaman, mengurangi waktu respon, dan memberikan pengalaman pengguna yang lebih lancar dan interaktif
Judul

Decades of Transformation: Evolution of the NASA Astrophysics Data System's Infrastructure
Penulis



Alberto Accomazzi

Tahun Terbit

2024
Masalah

Kebutuhan akan sistem digital yang efisien untuk mendukung riset astronomi dan astrofisika, termasuk pengelolaan metadata, arsip artikel teks lengkap, dan kemampuan pencarian yang handal.
Tujuan

Mendeskripsikan evolusi sistem NASA Astrophysics Data System (ADS) dari basis data bibliografi sederhana menjadi sistem perpustakaan digital terbuka yang mendukung riset di bidang astronomi, astrofisika, dan ilmu ruang angkasa, serta mendiskusikan infrastruktur teknologi yang mendasarinya.
Metode Penelitian

Studi literatur dan analisis terhadap evolusi arsitektur ADS, termasuk transisi dari model database sederhana ke arsitektur mikroservis berbasis cloud, penggunaan mesin pencari sumber terbuka, dan integrasi algoritma Machine Learning serta Natural Language Processing untuk meningkatkan ekstraksi informasi, klasifikasi, dan rekomendasi.
Hasil



ADS berhasil bertransformasi menjadi sistem perpustakaan digital terbuka yang mendukung riset interdisipliner, dengan peningkatan kemampuan pencarian teks lengkap, API modern, waktu operasional yang lebih tinggi, dan integrasi visualisasi serta analitik canggih. Penggunaan algoritma Machine Learning dan Natural Language Processing telah meningkatkan pengayaan metadata, pencarian, notifikasi, dan rekomendasi.

Judul

NASA API Using Python
Penulis



Nikhatwar, R., Uikey, R., Anthony, A., Kumbhare, M., Shegokar, S., Chaware, S., & Bansod, J.

Tahun Terbit

2021
Masalah

Keterbatasan akses informasi terkait asteroids, gambar ruang angkasa, dan data ilmiah NASA yang tersebar di berbagai platform, menyulitkan pengguna dalam memperoleh data secara efisien.
Tujuan

Mengembangkan aplikasi desktop berbasis Python yang memanfaatkan API publik NASA untuk menyediakan akses mudah ke informasi tentang asteroids, gambar ruang angkasa, dan data ilmiah lainnya dalam satu platform terintegrasi.
Metode Penelitian

Pengembangan aplikasi desktop menggunakan Python dan Tkinter untuk antarmuka pengguna. Aplikasi ini mengintegrasikan berbagai API NASA untuk menyediakan fitur seperti pemantauan asteroid secara real-time, repositori gambar publik NASA, kalkulator berat planet, gambar harian NASA, dan pewarnaan gambar ruang angkasa.
Hasil

Aplikasi berhasil menyediakan akses mudah dan efisien ke berbagai informasi ilmiah dari NASA, memungkinkan pengguna untuk memantau asteroid, mengakses gambar ruang angkasa, menghitung berat tubuh di berbagai planet, dan mewarnai gambar ruang angkasa secara otomatis. Aplikasi ini dirancang dengan antarmuka pengguna yang menarik dan mudah digunakan.





BAB III
 METODE PENELITIAN
3.1          Kerangka Berpikir
           Untuk memudahkan penelitian ini dibutuhkan sebuah rangkaian ataupun tahapan dalam penyelesaian masalah. Dengan adanya tahapan ini memudahkan peneliti untuk melakukan penelitian agar dapat mengetahui setiap langkah dan kesalahan pada tiap tahapan yang dilakukan. Berikut ini kerangka berpikir yang diterapkan pada penelitian ini. 

Gambar 3. 1 Alur Kerja Penelitian
3.1.1 Identifikasi Masalah
     Identifikasi masalah penelitian ini berfokus pada penelitian data exoplanet yang tersedia pada website exoplanet seperti NASA Exoplanet Archive dan Exoplanet.eu. Situs-situs tersebut kurang dinamis, terlalu statis, kurang interaktif, dan penggunaanya kurang ramah untuk pengguna awam. Situs website exoplanet resmi seperti NASA Exoplanet Archive dan Exoplanet.eu dikembangkan untuk penelitian astronomi dan situs Exoplanet.eu ada fitur visualisasinya. Namun tampilan visualisasinya masih bersifat statis, terlalu teknis, dan tidak intuitif, sehingga pengguna awam mengalami kesulitan dalam mengeksplorasi informasi yang tersedia. Selain itu, fitur-fitur visualisasi data yang ada belum mampu menyajikan hubungan antarparameter seperti massa, jarak orbit, dan suhu permukaan secara eksploratif dan real-time.
     Masalah lain yang telah diidentifikasi adalah fitur eksplorasi data pada website-website tersebut sering kali kurang responsif, pemprosesan yang lambat, serta tidak terintegrasi dengan baik antara tampilan antarmuka dan backend. Lalu fitur visualisasi pada website tersebut kurang dioptimalkan untuk memberikan pengalaman eksploratif secara real-time walaupun dalam bentuk grafis dinamis seperti scatter plot, histogram, atau representasi 3D lainnya. Hambatan yang dialami oleh pengguna awam pada saat menggunakan website-website exoplanet ini membuat pengguna kesulitan memahami keterkaitan antarparameter penting seperti jarak planet, massa, suhu permukaan, dan metode deteksi.
     Masalah lain juga muncul dari sisi teknis, di mana sebagian besar website exoplanet tersebut belum menyediakan antarmuka yang ramah perangkat mobile, serta tidak menyediakan sistem autentikasi pengguna atau fitur pencarian data secara fleksibel. Hal ini juga berdampak pada rendahnya interaksi dan keterlibatan pengguna terhadap konten yang disajikan.
     Dengan memahami permasalahan ini secara mendalam, pengembangan aplikasi website visualisasi interaktif data exoplanet dengan memanfaatkan ReactJS dan Flask diharapkan dapat menjadi solusi yang efektif dan mengembangkan aplikasi yang akan memberikan antarmuka yang dinamis, edukatif, dan responsif, serta memungkinkan pengguna untuk menjelajahi data astronomi secara mudah, cepat, dan real-time.
3.1.2 Studi Literatur
     (perbaiki)Studi literatur dilakukan untuk memperoleh landasan teoritis serta pemahaman yang mendalam terkait aspek teknis dan konseptual dalam pengembangan aplikasi website visualisasi interaktif data exoplanet. Penelitian ini merujuk pada beberapa sumber ilmiah, buku, dan jurnal yang relevan, yang mencakup tiga fokus utama: (1) visualisasi data ilmiah, (2) teknologi web modern (ReactJS dan Flask), dan (3) astronomi khususnya exoplanet. Pada aspek visualisasi data, berbagai literatur menyebutkan bahwa penyajian data secara visual mampu meningkatkan pemahaman pengguna terhadap informasi kompleks, terutama dalam bidang sains dan astronomi. Penggunaan grafik interaktif seperti scatter plot, histogram, dan diagram orbit dapat membantu pengguna menginterpretasi hubungan antarparameter fisik exoplanet, seperti massa, jari-jari, suhu permukaan, dan periode orbit. Dalam konteks ini, pustaka visualisasi seperti D3.js dan Chart.js telah terbukti efektif untuk mengembangkan visualisasi berbasis web yang dinamis dan responsif.
     Dari sisi teknologi pengembangan web, studi literatur membahas pemanfaatan ReactJS sebagai pustaka frontend JavaScript yang mendukung pembuatan antarmuka pengguna yang modular, cepat, dan interaktif melalui konsep Virtual DOM. Sementara itu, Flask digunakan sebagai framework backend berbasis Python yang ringan namun fleksibel dalam membangun RESTful API, mengelola data, serta berintegrasi dengan berbagai sumber seperti MongoDB dan API eksternal. Kombinasi ReactJS dan Flask banyak digunakan dalam proyek pengembangan aplikasi web modern karena kemudahan integrasinya dan dukungan terhadap arsitektur full-stack yang efisien.
     Dalam ranah astronomi, studi pustaka juga mencakup pemahaman mengenai karakteristik exoplanet dan tantangan dalam penyajiannya ke publik. Situs-situs resmi seperti NASA Exoplanet Archive dan Exoplanet.eu menjadi referensi utama untuk memahami bagaimana data exoplanet disusun dan disajikan. Namun, literatur juga menunjukkan bahwa situs-situs ini belum sepenuhnya optimal dari sisi edukasi publik karena tampilan visual yang masih teknis dan kurang intuitif bagi pengguna umum.
     Dari berbagai sumber tersebut, diperoleh pemahaman bahwa terdapat peluang untuk mengembangkan aplikasi berbasis web yang tidak hanya menampilkan data exoplanet secara informatif, tetapi juga menyajikannya melalui visualisasi interaktif yang mendukung eksplorasi dan edukasi. Studi literatur ini menjadi dasar penting dalam merancang arsitektur sistem, pemilihan teknologi, serta pendekatan desain dalam pengembangan aplikasi yang diusulkan.

3.1.3 Pengumpulan Data
     Dalam penelitian yang berjudul "Pengembangan Aplikasi Website Visualisasi Interaktif Data Exoplanet Menggunakan Framework ReactJS dan Flask", metode yang digunakan untuk analisis dan pengujian sistem adalah metode black-box. Metode black-box merupakan pendekatan pengujian perangkat lunak yang berfokus pada fungsi sistem berdasarkan input dan output tanpa memeriksa struktur internal kode atau logika pemrograman yang digunakan.
     Penggunaan metode black-box dalam penelitian ini bertujuan untuk memastikan bahwa setiap fitur pada aplikasi web berjalan sesuai dengan kebutuhan pengguna dan spesifikasi fungsional yang telah ditentukan. Dengan kata lain, pengujian dilakukan untuk mengevaluasi apakah sistem merespons input dengan output yang tepat, seperti visualisasi data exoplanet, pemrosesan input pengguna, serta interaksi antar komponen antarmuka yang dikembangkan menggunakan ReactJS di sisi frontend dan Flask di sisi backend.
     Metode ini sangat cocok digunakan dalam tahap akhir pengembangan untuk memastikan bahwa aplikasi berfungsi sebagaimana mestinya dari sudut pandang pengguna akhir, tanpa perlu memahami detail teknis dari kode program yang dijalankan. Dengan pendekatan ini, keandalan dan fungsionalitas aplikasi visualisasi interaktif dapat diuji secara menyeluruh.
3.1.4 Perencanaan
3.1.4.1 Analisis Kebutuhan Sistem
     Analisis kebutuhan sistem adalah proses yang digunakan untuk menentukan spesifikasi kebutuhan sistem. Spesifikasi ini mencakup elemen atau komponen yang dibutuhkan untuk membangun sistem hingga tahap implementasi. Selain itu, analisis kebutuhan juga meliputi penentuan spesifikasi masukan yang diperlukan sistem, keluaran yang akan dihasilkan, serta proses yang dibutuhkan untuk mengolah masukan tersebut sehingga menghasilkan keluaran yang diinginkan.
     Metode analisis ini berkaitan dengan perancangan sistem yang akan dibuat dan hasil yang ingin dicapai. Dengan menggunakan metode analisis yang terstruktur dan terpadu, perancangan sistem akan menghasilkan prototype yang sesuai dengan kebutuhan. Dalam hal ini, metode Waterfall diterapkan untuk mengembangkan perangkat lunak secara sistematis dan terstruktur. Setiap tahap, mulai dari analisis kebutuhan hingga pengujian, dilakukan secara berurutan untuk memastikan bahwa setiap fase pengembangan sistem memenuhi kebutuhan yang telah ditetapkan. Metode ini digunakan setelah tujuan dan masalah yang ingin diselesaikan sudah dipahami dengan jelas.
 3.1.4.2 Metode Analisis
     Dalam penelitian yang berjudul "Pengembangan Aplikasi Website Visualisasi Interaktif Data Exoplanet Menggunakan Framework ReactJS dan Flask", metode yang digunakan untuk analisis dan pengujian sistem adalah metode black-box. Metode black-box merupakan pendekatan pengujian perangkat lunak yang berfokus pada fungsi sistem berdasarkan input dan output tanpa memeriksa struktur internal kode atau logika pemrograman yang digunakan.
     Penggunaan metode black-box dalam penelitian ini bertujuan untuk memastikan bahwa setiap fitur pada aplikasi web berjalan sesuai dengan kebutuhan pengguna dan spesifikasi fungsional yang telah ditentukan. Dengan kata lain, pengujian dilakukan untuk mengevaluasi apakah sistem merespons input dengan output yang tepat, seperti visualisasi data exoplanet, pemrosesan input pengguna, serta interaksi antar komponen antarmuka yang dikembangkan menggunakan ReactJS di sisi frontend dan Flask di sisi backend.
3.1.4.3 D
3.1.4.3 Analisis Kebutuhan
        Untuk menyelesaikan masalah yang telah dikemukakan di atas, ada beberapa analisis yang dibutuhkan. Adapun masing-masing analisis tersebut adalah :
a) Perangkat Keras (Hardware)
Model      : Nitro AN515-44
Processor : AMD Ryzen 5 4600H with Rado Graphics, 3000 Mhz, 6 Core(s)
Memory   : RAM 8 GB
Storage     : 500 GB
GPU         : NVIDIA GeForce GTX 1650 Ti
b) Perangkat Lunak
1. Sistem Operasi Windows 10
2. Visual Studio Code
3. Python
4. Node.js
5. Express.js
6. MongoDB
7. Postman
8. React.js
9. Redux
10. Axios
11. Docker
3.1.5.13 Use Case Diagram
     Use Case Diagram pada Gambar 3.2 bertujuan untuk menggambarkan bagaimana interaksi antara pengguna, yang dijelaskan dalam bentuk aktor, dengan sistem aplikasi website visualisasi interaktif data exoplanet yang dikembangkan dalam penelitian berjudul "Pengembangan Aplikasi Website Visualisasi Interaktif Data Exoplanet Menggunakan Framework ReactJS dan Flask." Diagram ini menjelaskan fungsi-fungsi utama dari sistem yang dapat diakses oleh masing-masing aktor, baik dari sisi pengguna umum maupun administrator sistem. Aplikasi ini dirancang untuk menyajikan data exoplanet dalam bentuk visualisasi yang interaktif dan informatif, sehingga pengguna dapat menjelajahi dan memahami karakteristik berbagai exoplanet yang telah ditemukan oleh misi luar angkasa seperti Kepler, TESS, dan lainnya.
Aktor utama dalam use case diagram ini adalah:
1. Admin
      Admin merupakan aktor yang memiliki hak akses penuh terhadap sistem dan bertanggung jawab dalam pengelolaan data exoplanet. Tugas utama admin meliputi unggah dan pembaruan dataset exoplanet dari sumber terpercaya seperti NASA Exoplanet Archive, pengelolaan konten visualisasi, serta pemantauan kinerja aplikasi. Admin juga memastikan bahwa data yang ditampilkan valid, bebas dari kesalahan, serta mengikuti struktur yang dibutuhkan oleh sistem backend Flask dan frontend ReactJS. Selain itu, admin dapat menangani laporan atau masukan dari pengguna terkait kesalahan data atau masalah teknis dalam tampilan visualisasi.
2. User (Pengguna Umum)
    User adalah pengguna akhir dari aplikasi, yang dapat mengakses berbagai fitur visualisasi interaktif mengenai exoplanet. Pengguna dapat mencari planet tertentu, memfilter data berdasarkan parameter seperti nama planet, metode deteksi, ukuran, atau suhu, serta menampilkan grafik seperti scatter plot, histogram, dan diagram orbit. Fitur visualisasi ini mempermudah pengguna untuk memahami hubungan antar parameter exoplanet dan melakukan eksplorasi secara bebas berdasarkan minatnya.
Penjelasan Use Case pada Aplikasi Website Visualisasi Data Exoplanet:
1. Registrasi dan Login Pengguna (Opsional)
Pengguna dapat melakukan registrasi dan login untuk menyimpan preferensi tampilan atau bookmark planet favorit. Namun, fitur login bersifat opsional karena sebagian besar visualisasi dapat diakses secara bebas. Dengan akun, pengguna juga dapat mengirimkan masukan atau menyimpan konfigurasi tampilan.
2. Eksplorasi Data Exoplanet
Fitur utama yang ditawarkan adalah eksplorasi data exoplanet melalui antarmuka visual. Pengguna dapat menelusuri berbagai exoplanet berdasarkan filter seperti metode deteksi (misalnya transit atau kecepatan radial), radius planet, massa, suhu, dan parameter lainnya. Hasil eksplorasi ditampilkan dalam bentuk grafik yang interaktif untuk memudahkan pemahaman.
3. Tampilan Visualisasi Interaktif
Data exoplanet ditampilkan dalam berbagai bentuk visualisasi seperti grafik orbit, perbandingan massa-radius, histogram suhu permukaan, dan diagram hubungan antarparameter. Visualisasi ini dibangun menggunakan pustaka grafik seperti Chart.js atau D3.js yang terintegrasi dengan ReactJS. Backend Flask menyediakan API untuk menyuplai data terstruktur ke frontend.
4. Pengelolaan Dataset dan API oleh Admin
Admin bertanggung jawab untuk mengelola dataset yang digunakan oleh sistem. Admin dapat memperbarui dataset secara manual maupun melalui integrasi API dari sumber resmi seperti NASA Exoplanet Archive. Selain itu, admin mengelola endpoint API agar data yang dikirimkan ke frontend selalu terkini dan dapat ditampilkan secara optimal oleh komponen ReactJS.
5. Pemberian Masukan dan Laporan Masalah
Pengguna dapat mengirimkan laporan atau masukan terkait kesalahan data, visualisasi yang tidak tampil dengan benar, atau saran perbaikan melalui formulir masukan. Admin kemudian akan meninjau dan memperbaiki masalah tersebut untuk meningkatkan kualitas aplikasi.
6. Pembaharuan Antarmuka dan Fitur oleh Admin
Admin juga memiliki peran dalam memperbarui konten visualisasi atau memperluas jenis visualisasi baru yang akan ditambahkan ke sistem. Ini termasuk menyesuaikan filter, memperbaiki tampilan responsif, atau menambah representasi grafik baru yang lebih kompleks.

Gambar 3.2 Use Case Diagram Dari Rancangan Aplikasi

                               


                
3.1.5.14 Activity Diagram
     Activity diagram adalah diagram yang digunakan untuk menggambarkan alur aktivitas atau proses yang terjadi dalam suatu aplikasi. Dalam penelitian ini, activity diagram digunakan untuk menggambarkan berbagai tahap dalam proses deteksi exoplanet Gliese 667 CC di sistem bintang Gliese 667 menggunakan Convolutional Neural Network (CNN) berbasis data kecepatan radial. Activity diagram ini menggambarkan langkah-langkah yang diambil dari awal pengumpulan data hingga proses optimasi model CNN. Berikut adalah beberapa activity diagram yang menggambarkan alur kerja yang diperlukan dalam aplikasi deteksi exoplanet:
- Admin dalam Activity Diagram : Admin memiliki wewenang untuk mengelola dan memantau seluruh proses yang terjadi dalam aplikasi, termasuk mengelola pengguna, data, dan hasil deteksi. Dalam activity diagram, peran Admin meliputi beberapa langkah berikut:
- Verifikasi dan Manajemen Pengguna: Admin bertanggung jawab untuk memverifikasi akun pengguna yang mendaftar dan memastikan data kredensial yang dimasukkan valid. Admin dapat menyetujui atau menolak pendaftaran pengguna berdasarkan data yang diberikan.
- Pengelolaan Data : Admin dapat menambahkan atau memperbarui data kecepatan radial yang digunakan untuk pelatihan model CNN. Admin juga memantau kualitas data dan mengonfirmasi bahwa data yang digunakan memenuhi standar kualitas yang diperlukan.
- Pengelolaan Model dan Pelatihan: Admin mengonfigurasi dan mengelola proses pelatihan model CNN. Admin dapat memilih dataset yang akan digunakan untuk pelatihan, memulai proses pelatihan, dan memantau progres pelatihan model.
- Pemantauan Hasil Deteksi : Admin memantau hasil deteksi exoplanet yang dilakukan oleh sistem. Admin dapat melihat laporan deteksi yang dihasilkan dan melakukan evaluasi terhadap akurasi dan kualitas hasil yang didapatkan.
- Optimasi dan Pemeliharaan Sistem: Admin dapat memulai proses optimasi model CNN atau memperbarui sistem untuk meningkatkan kinerja deteksi exoplanet. Jika ada masalah atau kesalahan dalam sistem, Admin dapat melakukan perbaikan untuk memastikan aplikasi berjalan dengan lancer

Gambar 3.3 Activity Diagram Admin Katalog Exoplanet
User (Peneliti/Astronom) dalam Activity Diagram
User (peneliti atau astronom) berfokus pada penggunaan aplikasi untuk mengumpulkan, menganalisis, dan mendeteksi exoplanet menggunakan model CNN. Dalam activity diagram, peran User meliputi langkah-langkah berikut:
1. Pendaftaran dan Login: User pertama kali melakukan pendaftaran akun untuk mengakses aplikasi. Setelah akun terdaftar, user dapat melakukan login dengan memasukkan kredensial yang sesuai (email dan password).
2. Pengumpulan dan Preprocessing Data: User mengakses data kecepatan radial dari sistem bintang Gliese 667 dan melakukan preprocessing untuk mempersiapkan data sebelum digunakan dalam pelatihan model CNN.
3. Pelatihan Model CNN: User memilih dataset yang akan digunakan untuk pelatihan model CNN dan memulai proses pelatihan. Proses ini melibatkan penyesuaian parameter dan pemantauan progres pelatihan untuk memastikan model berjalan dengan baik.
4. Deteksi Exoplanet: Setelah model CNN terlatih, user dapat menggunakan model untuk mendeteksi exoplanet berdasarkan data kecepatan radial yang dimasukkan. Sistem akan menghasilkan hasil deteksi, yang menunjukkan kemungkinan adanya exoplanet.
5. Analisis Hasil Deteksi: User menganalisis hasil deteksi exoplanet yang telah dilakukan oleh model CNN. User dapat memverifikasi apakah hasil deteksi sesuai dengan ekspektasi dan melanjutkan ke analisis lebih lanjut atau publikasi.
6. Optimasi dan Pengujian Model: User melakukan optimasi pada model CNN untuk meningkatkan akurasi deteksi exoplanet. Ini dapat melibatkan penyesuaian hyperparameter atau penggunaan teknik lain untuk memperbaiki performa model.

Gambar 3. 4 Activity Diagram User Katalog Exoplan
3.1.5.15 UI/UX Design
     Pada tahap desain, fokus utama adalah menciptakan antarmuka pengguna (UI) dan pengalaman pengguna (UX) yang intuitif, menarik, dan sesuai dengan kebutuhan calon pengguna aplikasi katalog exoplanet. Proses ini dilakukan sebelum implementasi atau pengkodean untuk memberikan gambaran yang jelas tentang bagaimana aplikasi akan terlihat dan berfungsi.
     Desain UI/UX dibuat berdasarkan diagram-diagram hasil analisis sistem untuk memastikan setiap elemen dan fitur aplikasi sesuai dengan kebutuhan pengguna yang telah diidentifikasi. Prototipe interaktif akan dirancang menggunakan software Figma, memungkinkan visualisasi tata letak layar, navigasi antarhalaman, dan interaksi pengguna dengan aplikasi.
Pada aplikasi katalog exoplanet, desain UI/UX akan mencakup:
- Beranda: Halaman utama yang menyajikan informasi ringkas tentang aplikasi, fitur utama, serta berita atau pembaruan terbaru seputar penelitian exoplanet. Beranda juga memberikan akses cepat ke fitur-fitur utama aplikasi.
- Katalog/Pencarian: Halaman untuk menjelajahi daftar exoplanet dengan fitur pencarian dan filter canggih berdasarkan atribut tertentu seperti nama planet, bintang induk, massa, atau tahun penemuan. Desain akan memastikan pengguna dapat dengan mudah menemukan informasi yang mereka butuhkan.
- Informasi Planet: Halaman detail yang menampilkan informasi mendalam mengenai exoplanet tertentu. Data seperti radius, massa, periode orbit, suhu, dan tahun penemuan akan disajikan dengan tampilan yang menarik dan informatif.
- Pengamatan/Tools: Halaman yang dirancang untuk menampilkan data hasil pengamatan, termasuk alat atau instrumen yang digunakan. Halaman ini juga memungkinkan pengguna untuk mengakses informasi teknis seperti parameter teleskop atau instrumen yang digunakan dalam penelitian exoplanet.
- Visualisasi/Plots: Halaman untuk menyajikan data dalam bentuk visualisasi grafis seperti grafik orbit, hubungan massa dan radius, atau distribusi exoplanet berdasarkan karakteristik tertentu. Hal ini bertujuan untuk memudahkan pengguna memahami data secara visual dan mendalam.


Gambar 3. 5 UI/UX Design Aplikasi Interaktif Exoplanet
3.1.6 Variabel dan Indikator
     Penelitian ini bertujuan untuk mengukur efektivitas dan pengalaman pengguna terhadap aplikasi web visualisasi interaktif data exoplanet yang dikembangkan menggunakan ReactJS dan Flask. Untuk mendapatkan data yang objektif dan terukur, digunakan pendekatan kuantitatif melalui instrumen kuisioner. Dalam pendekatan ini, terdapat lima variabel utama yang diukur, yaitu Usability, Responsiveness, Visual Clarity, Navigability, dan Educational Value. Masing-masing variabel memiliki indikator operasional yang diukur menggunakan skala Likert 1-5, di mana:
Tabel 3.1 Skor Indikator
Skor
Keterangan
1
Sangat Tidak Setuju
2
Tidak Setuju
3
Netral
4
Setuju
5
Sangat Setuju

Tabel berikut menunjukkan definisi operasional dan indikator dari setiap variabel yang digunakan dalam penelitian ini:


Tabel 3. 2 Variabel dan indikator penelitian
No.
Variabel
Versi
Indikator
Skala 
1
Usability
Kemudahan dan kenyamanan pengguna dalam menggunakan aplikasi web
- Learnability (kemudahan belajar)
 Likert 1- 5
2
Responsiveness
Kemampuan aplikasi menyesuaikan tampilannya pada berbagai perangkat
- Layout   adaptif
- Mobile friendly
- Kecepatan transisi antar halaman
Likert 1- 5
3
Visual Clarity
Kejelasan Tampilan grafis dan Informasi yang disajikan melalui UI dan Visualisasi Data
- Kejelasan teks
- Kualitas grafik
- Kontras warna dan label data
Likert 1- 5
4
Navigability
Kemudahan pengguna dalam menjelajahi halaman dan fitur aplikasi
- Ketersediaan tombol/menu
- Konsistensi navigasi
- Struktur halaman yang jelas
Likert 1- 5
5
Educational
Sejauh mana aplikasi dapat menyampaikan informasi ilmiah dengan mudah dan menarik
- Informasi mudah dimengerti
- Menambah wawasan
- Fitur edukatif mendukung pemahaman
Likert 1- 5

3.1.7 Instrumen Penelitian
     Instrumen penelitian merupakan alat yang digunakan untuk mengumpulkan data kuantitatif dari responden. Dalam penelitian ini, instrumen yang digunakan adalah kuisioner tertutup yang disusun berdasarkan lima variabel utama, yaitu: Usability, Responsiveness, Visual Clarity, Navigability, dan Educational Value.
     Setiap variabel terdiri atas beberapa indikator operasional yang dituangkan ke dalam bentuk pernyataan-pernyataan. Kuisioner menggunakan skala Likert lima poin, di mana responden diminta untuk memberikan penilaian sesuai tingkat persetujuan mereka terhadap setiap pernyataan.
Tabel 3. 3 Keterangan penilaian responden
Nilai
Keterangan
1
Sangat Tidak Setuju
2
Tidak Setuju
3
Netral
4
Setuju
5
Sangat Setuju

Tabel 3. 4 Contoh Butir Pertanyaan Dari Responden
Variabel
Indikator
Pernyataan Kuisioner
Usability
Learnability
Aplikasi ini mudah digunakan saat pertama kali dicoba
Usability
Efficiency
Saya dapat menggunakan fitur visualisasi dengan cepat
Responsiveness
Mobile Friendly
Aplikasi dapat menyesuaikan tampilannya di berbagai ukuran layar
Visual Clarity
Kejelasan teks dan grafik
Teks dan grafik pada aplikasi mudah dibaca dan dipahami
Navigability
Struktur halaman
Saya bisa berpindah antar halaman tanpa kebingungan
Educational Value
Daya edukasi fitur
Fitur-fitur visualisasi membantu saya memahami informasi tentang exoplanet.

3.1.8 Implementasi
     Pada tahap ini, desain yang telah dirancang sebelumnya diimplementasikan menjadi kode program atau perangkat lunak yang dapat diuji dan dijalankan. Proses implementasi mencakup pengembangan frontend dan backend aplikasi katalog exoplanet menggunakan pendekatan MERN stack (MongoDB, Express.js, React.js, dan Node.js), dengan integrasi penuh antara kedua bagian untuk memastikan kelancaran fungsi aplikasi.
*  Frontend
          Bagian antarmuka pengguna akan dikembangkan menggunakan React.js, sebuah pustaka JavaScript yang fleksibel dan efisien untuk membangun antarmuka interaktif. React.js dipilih karena kemampuannya untuk menciptakan komponen-komponen yang dapat digunakan kembali, serta mendukung pengalaman pengguna yang dinamis dan responsif. Dengan konsep Virtual DOM, React.js juga memberikan performa yang optimal pada aplikasi berskala besar, seperti katalog exoplanet ini, yang memungkinkan antarmuka pengguna merespons secara cepat terhadap perubahan data.
*  Backend
          Bagian server akan dikembangkan menggunakan Node.js dan Express.js. Node.js menyediakan lingkungan runtime yang cepat dan ringan, sementara Express.js mempermudah pengelolaan rute, middleware, dan logika backend. Node.js dipilih karena kemampuannya untuk menangani permintaan I/O secara non-blocking, memungkinkan aplikasi menangani banyak permintaan secara simultan tanpa menurunkan performa. Express.js menyederhanakan proses pengaturan API dan integrasi dengan middleware lain yang diperlukan untuk pengelolaan data exoplanet.
*  Database
           Aplikasi akan menggunakan MongoDB sebagai sistem basis data untuk menyimpan informasi tentang exoplanet, bintang, observasi, dan data terkait lainnya. MongoDB dipilih karena fleksibilitasnya dalam menyimpan data dalam format dokumen yang sesuai dengan struktur JSON. Sebagai basis data NoSQL, MongoDB memungkinkan penambahan data baru tanpa perlu mendefinisikan skema yang ketat, yang sangat berguna dalam aplikasi yang akan terus berkembang dan membutuhkan skalabilitas yang tinggi. Dengan MongoDB, kita dapat dengan mudah menyimpan data dengan struktur yang kompleks dan melakukan query cepat untuk mengambil informasi yang relevan dengan exoplanet.
* Integrasi Frontend dan Backend
         Integrasi antara frontend dan backend dilakukan melalui API RESTful yang dirancang pada backend menggunakan Express.js. API ini menyediakan berbagai endpoint yang memungkinkan frontend untuk mengakses data secara efisien dan melakukan operasi CRUD (Create, Read, Update, Delete). Frontend akan menggunakan Axios atau metode fetch bawaan JavaScript untuk membuat permintaan HTTP ke backend, memungkinkan data dari server diambil dan ditampilkan pada antarmuka pengguna secara real-time. API RESTful ini memastikan komunikasi yang mudah antara frontend dan backend, dengan menggunakan format JSON yang sederhana dan dapat dipahami oleh kedua sisi aplikasi.
* Integrasi dengan Node.js 
         Integrasi antara backend dan model CNN yang dilatih menggunakan PyTorch akan memungkinkan aplikasi untuk mengakses hasil analisis citra secara real-time. Frontend React.js dapat membuat permintaan HTTP ke backend, yang kemudian mengirimkan gambar untuk dianalisis oleh model CNN. Hasil analisis akan dikembalikan dalam format yang mudah dipahami oleh frontend, misalnya dalam format JSON, yang akan ditampilkan kepada pengguna di antarmuka aplikasi.
* Periodogram:
          Periodogram akan diterapkan untuk menganalisis sinyal periodik dari data exoplanet yang diperoleh dari pencitraan atau pengamatan transit. Dengan menganalisis data periodik yang dihasilkan dari sistem exoplanet, periodogram dapat membantu mengidentifikasi periode orbit dan hubungan antara planet dan bintang induknya. Hal ini berguna untuk menilai stabilitas orbit dan mencari tanda-tanda kehidupan atau sumber energi.
* Visualisasi Data
         Sebagai bagian dari pengembangan aplikasi website interaktif, visualisasi data berperan penting dalam meningkatkan pemahaman terhadap data exoplanet dan hasil analisis berbasis CNN. Data akan disajikan dalam bentuk grafik interaktif, seperti histogram, scatter plot, dan diagram distribusi parameter fisis exoplanet. Selain itu, hasil klasifikasi citra dari model CNN akan divisualisasikan agar pengguna dapat mengamati pola atau karakteristik khas dari exoplanet atau bintang target. Visualisasi ini mencakup tampilan citra hasil analisis, serta representasi visual dari atribut seperti radius, massa, suhu, dan jarak orbit yang disesuaikan dengan kebutuhan eksplorasi data secara interaktif melalui antarmuka berbasis ReactJS.
* Integrasi dengan Backend (Node.js):
         Model CNN yang telah dilatih dan disimpan di backend dapat diakses melalui integrasi dengan Node.js. Untuk menghubungkan model machine learning dengan backend, dapat digunakan pustaka seperti tensorflow-node yang memungkinkan model TensorFlow dioperasikan dalam lingkungan Node.js. Atau, alternatif lain adalah menggunakan API Python yang dapat diintegrasikan dengan backend. Frontend dapat melakukan permintaan HTTP untuk mendapatkan hasil analisis yang kemudian ditampilkan pada antarmuka pengguna secara real-time.
*  Citra Exoplanet dan Bintang 
           Input utamanya adalah adalah gambar-gambar exoplanet dan bintang yang diperoleh dari observasi teleskop. Citra ini akan melalui berbagai tahap preprocessing, termasuk konversi ke dalam format yang dapat digunakan oleh model (misalnya ukuran gambar yang seragam, normalisasi nilai piksel, dsb.). Citra-citra ini bisa berupa gambar visual dari teleskop optik, inframerah, atau bahkan gambar citra spektrum yang menunjukkan distribusi energi dari objek astronomi tersebut.
o Ukuran Gambar: Output gambar akan diubah ukurannya menjadi ukuran yang konsisten (misalnya, 224x224 piksel) untuk memastikan konsistensi dalam proses pelatihan dan evaluasi model.
o Normalisasi: Nilai piksel gambar akan dinormalisasi agar berada dalam rentang yang dapat dicerna oleh model, misalnya dalam rentang 0 hingga 1 atau -1 hingga 1, tergantung pada arsitektur yang digunakan.
o Augmentasi Gambar: Agar model lebih robust, augmentasi gambar dapat diterapkan untuk memperkaya dataset, seperti rotasi, pemotongan, dan pergeseran warna, yang membantu model untuk belajar dari variasi gambar yang lebih banyak.
3.1.7 Uji Validitas 
Uji validitas bertujuan untuk mengetahui sejauh mana instrumen (kuesioner) mampu mengukur apa yang seharusnya diukur. Validitas yang digunakan dalam penelitian ini adalah validitas isi (content validity) dan validitas empiris melalui validitas konstruk menggunakan analisis korelasi Pearson Product Moment.
Instrumen penelitian berupa kuesioner disusun berdasarkan indikator yang mengacu pada teori yang relevan dengan variabel penelitian. Sebelum digunakan untuk pengumpulan data, instrumen diuji cobakan terlebih dahulu kepada 30 responden di luar sampel penelitian.
Uji validitas dilakukan dengan bantuan program IBM SPSS Statistics versi 23. Setiap butir pernyataan dalam kuesioner dihitung nilai koefisien korelasinya antara skor item dengan total skor. Kriteria validitas ditentukan berdasarkan nilai signifikansi (Sig.) sebagai berikut:
* Jika nilai Sig. (2-tailed) < 0,05 maka item dianggap valid.
* Jika nilai Sig. (2-tailed) = 0,05 maka item dianggap tidak valid dan dikeluarkan dari instrumen.
Sebagaimana dalam penelitian yang dilakukan oleh Jabnabillah dan Margina (2022) dalam Jurnal Sintak, validitas instrumen diuji dengan metode korelasi Pearson, dan seluruh butir pernyataan dinyatakan valid setelah memenuhi kriteria signifikansi.
Setelah uji validitas dilakukan, seluruh item dalam kuesioner pada penelitian ini menunjukkan nilai signifikansi < 0,05, sehingga semua butir dinyatakan valid dan dapat digunakan untuk pengumpulan data utama.
3.1.8 Uji Reliabilitas
Uji reliabilitas bertujuan untuk mengetahui tingkat konsistensi suatu instrumen dalam mengukur konsep yang sama jika digunakan dalam waktu atau situasi yang berbeda. Reliabilitas diukur dengan Cronbach's Alpha, dengan kriteria se  bagai berikut:
Nilai Cronbach's Alpha
Kategori Reliabilitas
> 0,90
Sangat Tinggi
0,70 - 0,90
Tinggi
0,60 - 0,69
Cukup
< 0,60
Rendah
Analisis reliabilitas dilakukan menggunakan IBM SPSS Statistics versi 23. Berdasarkan hasil uji, nilai Cronbach's Alpha untuk kuesioner pada variabel:
* Motivasi Belajar diperoleh sebesar 0,949, menunjukkan reliabilitas yang sangat tinggi.
* Kemandirian Belajar diperoleh sebesar 0,745, menunjukkan reliabilitas yang cukup tinggi.

3.1.7 Pengujian
     Tahap pengujian bertujuan untuk memastikan bahwa aplikasi katalog exoplanet berfungsi dengan baik sesuai spesifikasi yang telah ditentukan dan bebas dari bug. Proses pengujian akan dilakukan menggunakan metode Black Box Testing dan Benchmarking untuk mengevaluasi fungsionalitas dan kinerja aplikasi.
 * Black Box Testing:
Pengujian dengan metode ini fokus pada menguji fungsi aplikasi berdasarkan input dan output tanpa memperhatikan struktur internal kode. Langkah-langkah yang dilakukan meliputi:
1. Menyusun Test Case: Test case akan mencakup berbagai skenario penggunaan aplikasi, seperti:
* Pencarian exoplanet berdasarkan nama atau parameter tertentu.
* Menampilkan informasi detail tentang exoplanet.
* Visualisasi data melalui grafik atau plot.
* Penggunaan alat observasi atau tools dalam aplikasi.
2. Eksekusi Test Case: Test case dijalankan untuk memastikan semua fitur berjalan sesuai ekspektasi. Misalnya, saat pengguna mencari exoplanet berdasarkan nama, aplikasi harus menampilkan hasil yang relevan.
3. Evaluasi dan Dokumentasi Hasil: Hasil dari setiap test case akan dicatat untuk menentukan apakah aplikasi lulus atau gagal pada skenario pengujian tertentu.
* Benchmarking:
Untuk mengevaluasi kinerja aplikasi, dilakukan pengujian benchmark yang mencakup:
1. Respons Time: Mengukur waktu respons aplikasi saat memproses permintaan, seperti pencarian data di katalog atau render grafik.
2. Load Testing: Menguji kemampuan aplikasi menangani banyak pengguna atau permintaan secara bersamaan.
3. Data Handling: Memastikan aplikasi dapat memproses data yang besar, seperti informasi ribuan exoplanet, tanpa kendala kinerja.
Setelah semua pengujian selesai, hasilnya akan dirangkum dalam sebuah laporan yang mencakup:
* Test case yang dijalankan.
* Hasil pengujian (lulus/gagal).
* Waktu respons aplikasi.
* Temuan bug atau masalah yang ditemukan beserta rekomendasi perbaikannya.
Alur Penggunaan
1. Pengguna memasukkan parameter di kolom kiri dan kanan.
2. Menekan tombol Start untuk menjalankan simulasi.
3. Grafik di area visualisasi diperbarui secara dinamis berdasarkan input.
4. Pengguna dapat menghentikan atau mengulang simulasi dengan tombol Stop dan Restart.
5. Data visualisasi dapat dianalisis melalui grafik-grafik yang ditampilkan.




3.2 Jadwal Penelitian
                     Tabel 3.5 Jadwal Penelitian
No
Tahapan Penelitian
Bulan


September 2024
Oktober 2024
November 2024
Desember 2024
Januari 2025
Februari2025
Maret 2025
April 2025
Mei
2025


1
2
3
4
1
2
3
4
1
2
3
4
1
2
3
4
1
2
3
4
1
2
3
4
1
2
3
4
1
2
3
4
1
2
3
4
1.
Identifikasi Masalah




































2.
Studi Literatur




































3.
Pengumpulan Data




































4.
Perencanaan




































5.
Pemodelan




































6.
Pembuatan




































7.
Pengujian




































8.
Penerapan




































9.
Demo Aplikasi




































10.
Dokumentasi Laporan





































Sudah Dilaksanakan

Belum Dilaksanakan


BAB IV 
PEMBAHASAN
4.1 Profil Perusahaan
     Fakultas Ilmu Komputer (FIK) merupakan salah satu fakultas di Universitas Pembangunan Nasional "Veteran" Jakarta. Resmi berdiri pada 1 Mei 1995, FIK awalnya merupakan bagian dari Fakultas Teknik sebelum akhirnya bertransformasi menjadi fakultas tersendiri. Saat ini, FIK memiliki empat program studi, yaitu S1 Sistem Informasi, S1 Informatika, D3 Sistem Informasi, dan yang terbaru S1 Sains Data. FIK UPNVJ berkomitmen untuk mencetak lulusan yang unggul di bidang teknologi dan aplikasinya, menghasilkan karya inovatif, serta menciptakan lingkungan akademik yang mendukung peningkatan kualitas pendidikan secara berkelanjutan.
4.2 Use Case Diagram

4.3 Class Diagram

     Class diagram digunakan untuk menggambarkan struktur logis dan relasi antar entitas dalam sistem aplikasi visualisasi data exoplanet. Meskipun sistem ini menggunakan basis data NoSQL (MongoDB), perancangan class diagram tetap diperlukan untuk memberikan gambaran konseptual mengenai entitas, atribut, serta hubungan antar objek yang berinteraksi di dalam aplikasi. Class diagram yang disusun berfokus pada entitas utama, yaitu data planet ekstrasurya, pengguna, aktivitas pengguna, pengaturan visualisasi, serta kandidat exoplanet dari misi TESS. Kelas Exoplanet merepresentasikan data planet ekstrasurya dan memuat atribut penting seperti name, radius, mass, orbital_period, host_star, dan discovery_method. Setiap entri Exoplanet juga mencatat asal data teleskop dan tahun penemuan, serta memiliki referensi system_id untuk menunjukkan keterkaitan dengan kelas PlanetarySystem. Hubungan antara Exoplanet dan PlanetarySystem bersifat many-to-one, karena satu sistem planet dapat memiliki banyak planet.
     Kelas PlanetarySystem menyimpan informasi mengenai sistem bintang yang menjadi pusat orbit dari planet-planet ekstrasurya. Atribut yang disimpan meliputi nama sistem (name), jumlah planet (num_planets), massa dan radius bintang (stellar_mass dan stellar_radius), temperatur permukaan, dan jarak sistem terhadap Bumi. 
     Kelas TESSCandidate digunakan untuk menyimpan data hasil observasi teleskop luar angkasa TESS. Kelas ini menyimpan atribut seperti name, radius, period, sector, dan nilai signal_to_noise, serta status konfirmasi planet (is_confirmed) yang membedakan antara kandidat dan planet yang telah divalidasi. Kelas User mencatat data pengguna sistem, baik pengguna biasa maupun admin, melalui atribut seperti username, email, password_hash, dan role. Terdapat atribut created_at untuk merekam waktu pendaftaran pengguna. Hubungan antara pengguna dan aktivitasnya direpresentasikan oleh kelas ActivityLog, yang mencatat setiap tindakan pengguna di dalam sistem, seperti login, ekspor data, atau pencarian. Aktivitas ini dicatat melalui atribut activity dan timestamp, dan berelasi ke User melalui user_id. 
     Selanjutnya, kelas VisualizationSetting merepresentasikan pengaturan visualisasi yang digunakan oleh pengguna. Atribut dalam kelas ini meliputi type (jenis visualisasi seperti scatter plot atau histogram), pemetaan x_axis dan y_axis, serta daftar filters untuk menyaring data. Kelas ini juga memiliki relasi dengan User melalui user_id, yang menunjukkan bahwa setiap pengaturan visualisasi dimiliki oleh pengguna tertentu. 
Secara keseluruhan, class diagram ini mencerminkan struktur data inti dan hubungan antar entitas dalam sistem. Meskipun MongoDB tidak memerlukan skema tetap seperti pada basis data relasional, struktur class diagram ini tetap sangat berguna dalam proses pengembangan dan dokumentasi, terutama dalam mengarahkan implementasi backend dan integrasi API dengan frontend. Diagram ini juga membantu memastikan bahwa pengelolaan data pengguna, planet, sistem, visualisasi, dan log aktivitas dilakukan secara konsisten dan terstruktur di seluruh komponen aplikasi.
4.4 Sequence Diagram


     Sequence diagram berfungsi untuk menggambarkan alur interaksi antar objek secara kronologis dalam skenario fungsional sistem. Diagram ini menggambarkan proses bagaimana pengguna berinteraksi dengan sistem untuk melakukan eksplorasi dan visualisasi data exoplanet, dimulai dari mengakses halaman eksplorasi data, memfilter informasi, memilih jenis visualisasi, hingga menyimpan pengaturan visualisasi ke sistem.
     Alur dimulai saat pengguna membuka halaman eksplorasi, yang menyebabkan frontend (ReactJS) mengirim permintaan GET /api/exoplanets ke backend (Flask). Backend kemudian mengambil data dari MongoDB dan mengembalikannya ke frontend dalam format JSON. Data ditampilkan dalam bentuk tabel dan opsi visualisasi interaktif.
     Selanjutnya, pengguna dapat memasukkan filter, seperti radius atau periode orbit. Permintaan ini diteruskan ke backend yang melakukan kueri ulang ke database berdasarkan kriteria filter. Hasil yang difilter dikirim kembali dan divisualisasikan dalam bentuk grafik scatter plot atau histogram, sesuai pilihan pengguna.
     Pengguna juga dapat berinteraksi langsung dengan grafik, seperti mengarahkan kursor ke titik data untuk melihat informasi lebih detail tentang planet tertentu. Setelah menentukan konfigurasi visualisasi yang sesuai, pengguna dapat menyimpan pengaturan tersebut. Frontend mengirim permintaan POST ke backend untuk menyimpan konfigurasi ke database berdasarkan akun pengguna yang sedang login.


Sequence diagram ini menggambarkan proses alur pencarian dan penyaringan data exoplanet oleh pengguna pada aplikasi. Proses dimulai ketika user melakukan input berupa kata kunci atau filter (misalnya: radius > 1, metode penemuan = "Transit"). UI (User Interface) kemudian meneruskan permintaan ini ke FrontendController yang akan membuat permintaan ke backend Flask.
Backend (Flask API) akan menerima parameter pencarian dan memanggil fungsi service untuk mengakses database (MongoDB) menggunakan model Exoplanet. MongoDB akan mengembalikan data hasil pencarian dan filter, lalu backend mengirimkan data tersebut dalam format JSON kembali ke frontend, dan akhirnya data ditampilkan pada UI.
Langkah-langkah:
1. User mengisi form pencarian dan filter.
2. UI mengirim permintaan ke FrontendController.
3. FrontendController memanggil Flask API dengan parameter pencarian.
4. Flask API memproses permintaan dan memanggil service queryExoplanets(filter).
5. Database MongoDB mengeksekusi query dan mengembalikan hasilnya.
6. Flask API mengirim data JSON ke frontend.
7. FrontendController menampilkan hasil pada UI.


Sequence diagram ini menjelaskan bagaimana pengguna memilih jenis visualisasi data (scatter atau histogram) dan bagaimana aplikasi menghasilkan visualisasi tersebut. Setelah pengguna memilih jenis visualisasi dan parameter (misalnya sumbu X: radius, sumbu Y: massa), permintaan dikirim ke backend. Backend memfilter data sesuai parameter dan mengembalikan data numerik untuk divisualisasikan oleh pustaka grafik di frontend (seperti Chart.js atau Recharts).
Langkah-langkah:
1. User memilih jenis visualisasi dan parameter sumbu (X dan Y).
2. UI mengirimkan request visualisasi ke FrontendController.
3. FrontendController mengirimkan request ke Flask API.
4. Flask API mengambil data exoplanet dari database berdasarkan parameter.
5. Database MongoDB mengembalikan data.
6. Flask API mengirim data numerik ke frontend.
7. Frontend merender grafik interaktif berdasarkan data dan menampilkannya ke UI.

Diagram ini menggambarkan proses ketika pengguna ingin menyimpan pengaturan visualisasi (jenis grafik, sumbu, filter) agar dapat digunakan kembali. Setelah pengguna mengatur parameter, UI akan mengirim data pengaturan ke backend. Backend menyimpannya ke dalam koleksi VisualizationSetting dengan relasi ke user ID.
Langkah-langkah:
1. User klik tombol "Simpan Visualisasi".
2. UI mengirim permintaan penyimpanan ke FrontendController.
3. FrontendController mengirim data ke Flask API.
4. Flask API menyimpan data pengaturan ke koleksi VisualizationSetting.
5. Database MongoDB menyimpan dan mengembalikan status sukses.
6. Flask API mengirim konfirmasi penyimpanan ke frontend.
7. UI menampilkan pesan bahwa pengaturan berhasil disimpan.


Sequence diagram ini menggambarkan bagaimana sistem mencatat aktivitas pengguna (misalnya ekspor data, login, filter, dll) ke dalam log aktivitas yang disimpan dalam basis data MongoDB. Pencatatan ini penting untuk kebutuhan audit, pelacakan penggunaan sistem, maupun analisis perilaku pengguna.
2. Aktor dan Komponen Sistem
* User: Pengguna sistem yang melakukan aksi tertentu (contohnya ekspor data).
* Frontend (React): Antarmuka pengguna yang menerima input dari user dan menampilkan hasil atau status aksi.
* Backend (Flask API): Server-side logic yang memproses permintaan, melakukan penyimpanan log aktivitas, dan menjalankan aksi.
* MongoDB: Basis data NoSQL tempat penyimpanan dokumen log aktivitas pengguna dalam koleksi ActivityLog.
3. Alur Proses Detail
1. User melakukan aksi
Pengguna melakukan sebuah aksi melalui antarmuka web, seperti menekan tombol "Ekspor" pada halaman visualisasi data.
2. Frontend (React) mengirim permintaan ke Backend
React mengirim request POST /export ke Flask API untuk memproses permintaan ekspor data.
3. Backend menyimpan log aktivitas ke MongoDB
Setelah menerima request ekspor, Flask API segera menyimpan aktivitas tersebut ke koleksi ActivityLog. Dokumen log biasanya mencatat:
o user_id: ID pengguna yang melakukan aksi.
o activity: Deskripsi aktivitas (misalnya: "Exported scatter plot").
o timestamp: Waktu aktivitas dilakukan (biasanya datetime.utcnow()).
4. Database mengonfirmasi penyimpanan log
MongoDB merespons bahwa data berhasil disimpan ke koleksi log aktivitas.
5. Backend mengirimkan file hasil ekspor ke frontend
Setelah log berhasil dicatat, Flask API memproses permintaan ekspor (misalnya: membuat file .csv atau .png), lalu mengirimkannya ke frontend.
6. Frontend memberi tahu user bahwa ekspor selesai
UI menampilkan notifikasi bahwa proses ekspor telah selesai dan file berhasil diunduh atau ditampilkan.


Sequence ini khusus untuk admin dalam mengelola pengguna (lihat daftar pengguna, hapus, atau ubah peran). Admin menggunakan antarmuka admin panel untuk melihat semua pengguna, yang kemudian dikirim ke backend untuk diambil dari database User.
Langkah-langkah:
1. Admin membuka halaman manajemen pengguna.
2. UI mengirim permintaan ke FrontendController.
3. FrontendController menghubungi Flask API.
4. Flask API memanggil fungsi untuk mengambil daftar pengguna dari MongoDB.
5. Database mengembalikan data semua pengguna.
6. Flask API mengembalikan data ke frontend.
7. UI menampilkan daftar pengguna.
Jika admin melakukan aksi tambahan (ubah atau hapus):
* Permintaan dikirim kembali ke backend.
* Backend memproses update atau delete berdasarkan user ID.
* Status sukses dikirim kembali ke UI.


Diagram ini menjelaskan bagaimana backend mengambil data dari sumber eksternal (NASA Exoplanet Archive). Biasanya dilakukan oleh backend saat admin atau sistem memicu proses sinkronisasi. Backend mengirim HTTP request ke NASA API, menerima data, lalu menyimpan ke koleksi Exoplanet atau PlanetarySystem di MongoDB.
Langkah-langkah:
1. Admin klik tombol "Sinkronisasi Data".
2. UI mengirim permintaan ke FrontendController.
3. FrontendController mengirim request ke Flask API.
4. Flask API melakukan HTTP request ke NASA Exoplanet Archive.
5. NASA API mengembalikan data JSON.
6. Flask API mengolah dan menyimpan data ke MongoDB.
7. MongoDB menyimpan data dan mengembalikan status sukses.
8. Flask API mengirim pesan sukses ke UI.
9. UI menampilkan pesan bahwa data berhasil diambil dan disimpan.
4.5 Activity Diagram

Diagram ini menunjukkan proses login dan autentikasi pengguna sebelum mengakses fitur aplikasi. Proses dimulai ketika pengguna membuka halaman login dan memasukkan kredensial berupa username dan password. Setelah itu, frontend mengirim data login tersebut ke backend.
Backend kemudian memverifikasi kredensial terhadap data pengguna yang tersimpan di MongoDB. Apabila autentikasi berhasil, backend akan mengirimkan token atau informasi sesi ke frontend, lalu pengguna diarahkan ke halaman eksplorasi data.
Namun, jika autentikasi gagal (karena username atau password salah), maka frontend akan menampilkan pesan kesalahan kepada pengguna dan proses login dihentikan. Aktivitas ini penting untuk menjamin keamanan aplikasi, memastikan hanya pengguna yang sah dapat mengakses dan menggunakan fitur-fitur eksplorasi dan visualisasi data.


Diagram ini menunjukkan proses utama yang dilakukan pengguna saat berinteraksi dengan fitur visualisasi data exoplanet. Proses diawali saat pengguna masuk ke halaman eksplorasi dan memilih jenis visualisasi yang diinginkan, seperti scatter plot atau histogram. Pengguna juga dapat menerapkan filter tertentu untuk menyaring data sesuai kriteria (misalnya radius, massa, atau metode penemuan).
Setelah itu, frontend akan mengirimkan permintaan data ke backend. Backend akan mengakses database MongoDB untuk mengambil data exoplanet yang sesuai. Data kemudian dikirim kembali ke frontend dan divisualisasikan dalam bentuk grafik interaktif.
Jika pengguna ingin menyimpan hasil visualisasi, mereka dapat menekan tombol ekspor. Frontend akan mengirim permintaan ke backend untuk membuat file ekspor (CSV atau gambar PNG). Setelah file siap, backend akan menyimpan log aktivitas pengguna dan mengirim file ke frontend untuk diunduh.

Diagram ini menjelaskan bagaimana seorang admin berinteraksi dengan fitur manajemen data dalam aplikasi. Setelah login sebagai admin, pengguna diarahkan ke halaman panel admin yang menampilkan seluruh data exoplanet, planetary systems, dan kandidat TESS dari database.
Admin dapat memilih untuk melakukan beberapa tindakan:
* Mengedit data, misalnya memperbaiki nilai massa, radius, atau nama planet.
* Menghapus data, jika ada data duplikat atau tidak valid.
* Menambahkan data baru, secara manual atau melalui unggahan file CSV.
Setiap perubahan yang dilakukan admin (baik penambahan, pengeditan, atau penghapusan) akan divalidasi oleh frontend, lalu dikirim ke backend. Backend memproses perubahan dan menyimpan update ke MongoDB. Aktivitas admin juga akan dicatat dalam koleksi ActivityLog sebagai bagian dari pelacakan historis sistem.



4.2 Analisis Kebutuhan Sistem
4.2.1 Kebutuhan Fungsional
     Kebutuhan fungsional merupakan daftar fungsi utama yang harus dimiliki oleh sistem aplikasi visualisasi data exoplanet agar dapat memenuhi tujuan dan kebutuhan pengguna. Kebutuhan aplikasi didapatkan dari permintaan Dosen ITB Fakultas Matematika dan Ilmu Pengetahuan Alam jurusan Astronomi yang Bernama Dr. Anton Timur Jaelani, S.Si., M.Si.
Untuk Kebutuhan Fungsional adalah sebagai berikut:
* Menampilkan data exoplanet dalam bentuk tabel yang mudah dibaca dan diakses.
* Menyediakan visualisasi grafik interaktif untuk menggambarkan orbit, jarak, ukuran planet, dan parameter relevan lainnya.
* Memungkinkan pengguna melakukan pencarian dan filter data berdasarkan kriteria seperti nama bintang induk, metode deteksi, jarak, atau ukuran planet.
* Menyediakan halaman detail yang menampilkan informasi lengkap dari exoplanet tertentu ketika dipilih.
* Menyediakan navigasi yang mudah antar modul aplikasi (beranda, tabel, visualisasi, dan detail).
4.2.2 Kebutuhan Non-Fungsional
    Kebutuhan non-fungsional menjelaskan karakteristik sistem yang tidak langsung terkait dengan fungsi utama tetapi sangat penting untuk kualitas sistem secara keseluruhan, seperti:
* Performa: Sistem harus memiliki waktu respon yang cepat dan dapat menangani permintaan pengguna dengan efisien agar pengguna tidak mengalami delay saat mengakses data atau visualisasi.
* Responsivitas: Antarmuka pengguna harus responsif dan dapat menyesuaikan tampilan pada berbagai perangkat, termasuk desktop, tablet, dan ponsel.
* UI/UX yang intuitif: Desain antarmuka harus mudah dipahami dan digunakan oleh pengguna dengan berbagai latar belakang tanpa membutuhkan panduan yang kompleks.
* Kompatibilitas browser: Aplikasi harus dapat berjalan dengan baik pada berbagai browser populer seperti Chrome, Firefox, Safari, dan Edge.
* Visualisasi interaktif dan real-time: Grafik harus memungkinkan interaksi pengguna seperti zoom, filter, dan hover untuk melihat detail data secara real-time.
4.2.3 Kebutuhan Perangkat Keras dan Lunak
     Untuk mendukung pengembangan dan operasional aplikasi, diperlukan spesifikasi perangkat keras dan perangkat lunak berikut:
* Perangkat Keras:
o Server backend yang mampu menjalankan aplikasi Flask dan database MongoDB dengan lancar.
o Perangkat pengujian berupa PC atau laptop dengan spesifikasi standar untuk pengembangan web (minimal prosesor quad-core, RAM 8 GB).
* Perangkat Lunak dan Library:
o Frontend: ReactJS sebagai framework utama untuk membangun antarmuka interaktif dan modular.
o Backend: Flask sebagai framework Python untuk pengembangan REST API dan manajemen data.
o Database: MongoDB sebagai database NoSQL untuk menyimpan data exoplanet.
o Visualisasi Data: Chart.js dan/atau D3.js untuk membuat grafik interaktif dan visualisasi data.
o Pendukung lainnya:
* Flask-CORS untuk mengatur Cross-Origin Resource Sharing.
* PyMongo untuk integrasi Flask dengan MongoDB.
* dotenv untuk manajemen variabel lingkungan (environment variables).
4.3 Use Case Diagram
4.3 Class Diagram
Class diagram merupakan bagian dari Unified Modeling Language (UML) yang digunakan untuk memodelkan struktur statis sistem berdasarkan kelas-kelas yang terdapat di dalam sistem, atribut yang dimiliki, serta relasi antar kelas tersebut. Pada pengembangan aplikasi ini, class diagram berfungsi untuk menggambarkan arsitektur backend (Flask) dan bagian-bagian logika data utama dari sistem.
Class diagram pada sistem ini mencakup representasi data pengguna, data exoplanet, serta proses visualisasi data yang digunakan dalam backend Flask. Sementara bagian frontend (ReactJS) berorientasi pada komponen, dan tidak digambarkan dalam bentuk class diagram UML tradisional.

4.3 Sequence Diagram
Sequence diagram digunakan untuk menggambarkan urutan interaksi antar objek dalam sistem berdasarkan waktu. Diagram ini penting untuk memahami bagaimana aliran kontrol dan data terjadi di antara komponen-komponen aplikasi, terutama dalam proses-proses utama seperti input data pengguna, perhitungan radius Schwarzschild, dan navigasi ke detail informasi.
Dalam pengembangan aplikasi edukatif visualisasi black hole ini, sequence diagram dibuat menggunakan pendekatan berorientasi objek dengan notasi Unified Modeling Language (UML).
4.3 Class Diagram
Class diagram merupakan bagian dari Unified Modeling Language (UML) yang digunakan untuk menggambarkan struktur statis dari sistem perangkat lunak, khususnya kelas, atribut, metode, serta hubungan antar kelas. Dalam pengembangan aplikasi website visualisasi interaktif data exoplanet ini, class diagram berfokus pada struktur backend yang dibangun menggunakan framework Flask dengan basis data MongoDB.
Arsitektur Backend Aplikasi
Backend aplikasi dibangun secara modular menggunakan pendekatan Blueprint dari Flask. Komponen utama backend meliputi:
* app.py: Entry point utama aplikasi
* routes/: Direktori yang menyimpan blueprint untuk autentikasi, pengguna, dan modul machine learning
* extensions.py: Inisialisasi ekstensi seperti JWT, Mongo, CORS
* config.py: Konfigurasi lingkungan
4.3 Activity Diagram

4.3 Penyusunan product backlog dan sprint
4.3.1 Product Backlog
    Product backlog merupakan daftar fitur dan kebutuhan utama yang akan dikembangkan dalam proyek ini. Semua fitur ini dirancang untuk mendukung tujuan utama aplikasi, yaitu menyediakan visualisasi interaktif dan akses data exoplanet secara mudah dan informatif. Berikut adalah daftar fitur yang direncanakan:
* Halaman Beranda
Halaman utama aplikasi yang menyajikan ringkasan dan navigasi ke fitur-fitur utama.
* Modul Visualisasi Interaktif
Menampilkan grafik dan visualisasi data exoplanet secara interaktif menggunakan pustaka visualisasi data (misalnya D3.js atau Chart.js).
* Modul Data Tabel
Menampilkan data exoplanet dalam bentuk tabel yang dapat diurutkan dan difilter.
* Modul Pencarian
Fitur pencarian untuk menemukan exoplanet berdasarkan nama, jarak, atau parameter lain.
* Modul Detail Exoplanet
Halaman yang menampilkan informasi detail dan lengkap tentang setiap exoplanet yang dipilih.
* Navigasi Antar Halaman
Sistem navigasi yang memudahkan pengguna berpindah antara halaman beranda, tabel, visualisasi, dan detail exoplanet.
* Autentikasi dan Manajemen Pengguna 
Fitur login dan manajemen akun pengguna untuk akses data yang lebih personal.
4.3.2 Sprint Backlog (Iterasi)
     Sprint backlog merupakan pembagian pengerjaan proyek dalam beberapa iterasi (sprint) untuk mengatur pengembangan secara bertahap dan terstruktur. Berikut contoh pembagian sprint untuk proyek ini:
* Sprint 1 - Setup Proyek dan Halaman Beranda
o Membuat kerangka proyek ReactJS dan Flask backend.
o Membuat halaman beranda dasar dengan tampilan statis dan navigasi awal.
o Konfigurasi koneksi antara frontend dan backend.
* Sprint 2 - Modul Data Tabel dan API Flask
o Implementasi API Flask untuk mengambil data exoplanet dari MongoDB.
o Membuat modul data tabel di frontend dengan kemampuan menampilkan data dari API.
o Menambahkan fitur dasar filter dan sorting pada tabel.
* Sprint 3 - Integrasi Visualisasi Interaktif dan Filter
o Membuat modul visualisasi interaktif menggunakan library visualisasi.
o Menghubungkan modul visualisasi dengan data dari backend.
o Menambahkan fitur filter dinamis untuk mengubah tampilan visualisasi berdasarkan kriteria pengguna.
* Sprint 4 - Modul Detail Exoplanet dan Penyempurnaan Navigasi
o Membuat halaman detail exoplanet yang menampilkan informasi lengkap.
o Menyempurnakan navigasi antar halaman untuk pengalaman pengguna yang lebih baik.
o Melakukan pengujian integrasi antar modul.
* Sprint 5 - Pengujian, Debugging, dan Deployment
o Melakukan pengujian end-to-end aplikasi.
o Memperbaiki bug dan optimasi performa.
o Persiapan deployment aplikasi ke server produksi.
4.4 Desain Database dan API Backend
4.4.1 Struktur Database

Gambar 4. 1 Struktur koleksi exoplanets dari database MongoDB

Gambar 4. 2 Skema MongoDB


Gambar 4. 3 Konfigurasi Firebase untuk Autentikasi

Gambar 4. 4 Tabel dari dataset exoplanet
     Untuk bagian backend, proyek ini menggunakan Flask dan MongoDB untuk mengelola logika bisnis, penyimpanan data, serta penyediaan API yang dibutuhkan oleh frontend. Flask berperan sebagai framework backend utama yang menangani permintaan dari antarmuka pengguna berbasis ReactJS, memproses data exoplanet yang diperoleh dari sumber eksternal, serta menghasilkan respons dalam format JSON yang dapat dikonsumsi oleh frontend. MongoDB digunakan sebagai sistem basis data untuk menyimpan berbagai informasi penting terkait exoplanet, termasuk nama, parameter orbit, data kecepatan radial, dan metadata lainnya. Backend ini juga menyediakan fitur autentikasi pengguna, pelaporan masalah, serta endpoint khusus untuk pemrosesan analisis data yang mendukung visualisasi interaktif pada aplikasi website.
     Lalu untuk bagian database MongoDB, terdapat collection yang bernama "exoplanet" yang berfungsi sebagai tempat penyimpanan data-data terkait planet di luar tata surya. Setiap dokumen dalam collection ini merepresentasikan satu exoplanet dengan atribut-atribut penting yang menggambarkan karakteristik fisik, parameter orbit, dan data observasi yang telah dikumpulkan dari berbagai sumber astronomi terpercaya seperti NASA Exoplanet Archive.
     Skema data dalam collection "exoplanet" didesain agar dapat menampung berbagai jenis informasi, antara lain:
* Identitas planet, seperti nama planet dan nama sistem bintang induknya.
* Parameter orbit yang meliputi jarak rata-rata planet dari bintang induk (semi-major axis), periode orbit, eksentrisitas orbit, dan kemiringan orbit.
* Data fotometrik yang berisi informasi mengenai perubahan kecerahan bintang selama transit planet, seperti kedalaman transit dan durasi transit.
* Data kecepatan radial yang mengukur perubahan kecepatan bintang akibat tarikan gravitasi planet, termasuk nilai rata-rata kecepatan dan amplitudo variasinya.
* Metadata observasi, seperti sumber data, tanggal pengambilan data terakhir, dan identitas observatorium atau peneliti yang melakukan pengamatan.
     Dengan struktur data yang terorganisir ini, backend Flask dapat dengan mudah melakukan query untuk mengambil data yang dibutuhkan, kemudian mengirimkannya dalam format JSON ke frontend ReactJS. Frontend menggunakan data tersebut untuk menghasilkan visualisasi interaktif yang memungkinkan pengguna mengeksplorasi informasi eksoplanet dengan berbagai grafik, tabel, dan fitur filter.
     Lalu Untuk bagian database MongoDB, terdapat collection yang bernama "exoplanet" yang menyimpan data-data observasi exoplanet dalam format dokumen JSON. Contoh data yang tersimpan di dalam collection ini adalah seperti berikut:
{
  "_id": {
    "$oid": "6826b40921ee0705549d7770"
  },
  "#": "#",
  "This": "COLUMN",
  "file": "tce_time0bk_err:",
  "was": "Transit",
  "produced": "Epoch",
  "by": "Unc.",
  "the": "[BKJD]"
}
     Dokumen di atas merepresentasikan potongan data asli dari file observasi transit exoplanet. Field _id adalah identifier unik otomatis dari MongoDB. Sedangkan field lain pada contoh ini merupakan metadata dari data observasi transit, seperti nama file pengamatan (file), jenis data (Transit Epoch), serta satuan waktu yang digunakan ([BKJD] atau Barycentric Kepler Julian Date). Data ini nantinya akan diolah dan disusun agar dapat divisualisasikan secara interaktif di aplikasi website, misalnya dalam bentuk grafik kurva cahaya atau tabel data parameter orbit. Dengan menggunakan struktur dokumen seperti ini di MongoDB, aplikasi dapat dengan mudah melakukan query, filter, dan menampilkan informasi exoplanet secara real-time kepada pengguna.
     Lalu ada konfigurasi Firebase yang digunakan untuk menginisialisasi aplikasi web agar dapat terhubung dengan layanan Firebase yang disediakan oleh Google. Firebase adalah platform pengembangan aplikasi yang menyediakan berbagai fitur seperti autentikasi, database real-time, storage, dan lain-lain, yang sangat berguna untuk mendukung pengembangan aplikasi modern.
Pada kode di atas, firebaseConfig berisi objek konfigurasi yang berisi informasi penting untuk menghubungkan aplikasi dengan project Firebase yang telah dibuat di Firebase Console. Detail konfigurasi tersebut meliputi:
* apiKey: Kunci API unik yang digunakan untuk mengidentifikasi aplikasi saat berkomunikasi dengan Firebase.
* authDomain: Domain autentikasi Firebase yang digunakan untuk proses login dan manajemen pengguna.
* projectId: ID unik dari proyek Firebase yang dibuat.
* storageBucket: Bucket penyimpanan cloud untuk menyimpan file statis seperti gambar atau dokumen.
* messagingSenderId: ID pengirim untuk layanan notifikasi pesan.
* appId: ID aplikasi unik yang digunakan Firebase untuk mengidentifikasi aplikasi ini.
     Selanjutnya, dengan memanggil fungsi initializeApp(firebaseConfig), aplikasi ReactJS akan terkoneksi dengan layanan Firebase yang sudah dikonfigurasi. Hal ini memungkinkan aplikasi untuk memanfaatkan berbagai fitur Firebase seperti autentikasi pengguna, penyimpanan data, dan layanan lainnya sesuai kebutuhan proyek website visualisasi interaktif data exoplanet.
4.4.2 Desain API Flask

Gambar 4. 5 Kode App.py

Gambar 4. 6 Bagian kode untuk rute autentikasi, Machine Learning Analyzer dan error handler
Pada Gambar 4.5 dan 4.6 adalah bagian dari App.py, App.py ini adalah sebuah backend berbasis Flask yang bertindak sebagai RESTful API untuk mengakses dan menyajikan data-data astronomi dari berbagai sumber terpercaya seperti NASA, Exoplanet Archive (IPAC), dan Exoplanet.eu. Aplikasi ini menggunakan pendekatan modular dan scalable dengan mengimpor route terpisah (user_route, auth_route, dan ml_analyzer) dan menyiapkan berbagai endpoint yang dapat dipanggil dari frontend (kemungkinan menggunakan React atau Vue).
- Konfigurasi dan Setup Awal
Pada bagian awal file, berbagai library penting diimpor seperti requests untuk mengakses API eksternal, pyvo untuk query menggunakan VO TAP protocol, dan dotenv untuk membaca variabel lingkungan (environment variables) dari file .env. Aplikasi Flask ini diinisialisasi dengan mengatur folder frontend/build sebagai sumber file statis, yang berarti frontend dan backend bisa dijalankan dalam satu server produksi.
Konfigurasi CORS dilakukan agar aplikasi dapat menerima permintaan dari domain frontend seperti http://localhost:3000, yang umumnya digunakan saat pengembangan lokal. Selain itu, ekstensi seperti MongoDB (untuk menyimpan data), JWT (untuk autentikasi), dan admin panel juga disiapkan melalui inisialisasi Flask extension.
- Error Handling dan SPA Support
Aplikasi ini juga menerapkan global error handler yang menangkap seluruh exception dan mengembalikannya dalam format JSON yang seragam. Ini membantu debugging dan memudahkan integrasi di sisi frontend. Selain itu, terdapat fungsi yang menangani semua route selain API (misalnya /home, /about) untuk mengembalikan file index.html. Ini penting untuk Single Page Applications (SPA) agar routing dapat ditangani oleh frontend JavaScript (misalnya React Router atau Vue Router).
- Endpoint Umum
Endpoint pertama /api/nasa bertujuan untuk mengambil Astronomy Picture of the Day (APOD) dari NASA menggunakan API resmi mereka. Endpoint ini menggunakan API key yang dibaca dari environment variable. Jika berhasil, endpoint ini mengembalikan data gambar dan deskripsi astronomi hari itu dalam format JSON. Endpoint ini berguna untuk menampilkan konten astronomi harian kepada pengguna aplikasi.
Endpoint lain /routes digunakan sebagai utility endpoint untuk menampilkan semua route yang tersedia dalam aplikasi Flask ini. Sangat bermanfaat saat debugging atau mendokumentasikan API yang sudah dibuat.


Gambar 4. 7 Endpoint /api/exoplanets

Gambar 4. 8 Endpoint /api/tess-candidates

Gambar 4. 9 Endpoint /api/planetary-systems
     Pada Gambar 4.7 ada endpoint pertama, yaitu /api/exoplanets, digunakan untuk mengambil data planet ekstrasurya dari layanan NASA Exoplanet Archive melalui protokol TAP (Table Access Protocol). Ketika endpoint ini diakses melalui metode GET, server akan menjalankan sebuah query SQL yang mengambil data dari tabel pscomppars, khususnya nama planet (pl_name), metode penemuan (discoverymethod), periode orbit (pl_orbper), dan jari-jari planet dalam satuan Jupiter (pl_radj). Query ini hanya mengambil data dengan periode orbit yang tidak kosong dan mengurutkannya berdasarkan nilai pl_orbper. Setelah itu, query ini dikirim ke endpoint TAP milik NASA dalam format JSON, dan hasilnya dikembalikan ke klien. Jika terjadi kegagalan dalam pengambilan data, misalnya karena koneksi bermasalah atau server tidak merespons, maka server akan mengembalikan respons error dengan status 500 dan pesan kesalahan.
     Pada gambar 4.8 ada endpoint kedua, yaitu /api/tess-candidates, berfungsi untuk mengambil data kandidat planet yang teridentifikasi oleh teleskop luar angkasa TESS (Transiting Exoplanet Survey Satellite). Data ini berasal dari tabel TOI (TESS Objects of Interest). Ketika endpoint ini diakses, server menjalankan query SQL yang mengambil informasi seperti ID target TESS (tid), nomor kandidat (toi), periode orbit (pl_orbper), jari-jari planet dalam satuan Bumi (pl_rade), dan suhu efektif bintang induk (st_teff). Data yang diambil harus memiliki nilai st_teff yang tidak kosong dan hasilnya diurutkan berdasarkan suhu bintang dari yang tertinggi. Query ini dikodekan ke URL agar dapat diproses oleh server TAP NASA, dan permintaan dilakukan menggunakan HTTP GET. Jika respons dari server NASA berhasil diterima, hasilnya dikirimkan kembali ke klien dalam format JSON. Namun jika gagal, baik karena masalah permintaan HTTP atau kesalahan parsing JSON, server akan merespons dengan error beserta penjelasannya.
     Sementara itu, pada gambar 4.9 ada endpoint ketiga yang mengambil /api/planetary-systems, juga mengambil data dari tabel pscomppars, tetapi dengan cakupan data yang lebih lengkap dibandingkan /api/exoplanets. Query yang dijalankan mengambil nama planet (pl_name), nama bintang induk (hostname), metode penemuan (discoverymethod), periode orbit (pl_orbper), jari-jari planet (pl_radj), dan suhu ekuatorial planet (pl_eqt). Data yang diambil disaring agar hanya mencakup planet dengan periode orbit yang diketahui, dan kemudian diurutkan berdasarkan periode orbit. Setelah query dikirim ke layanan TAP NASA, hasilnya akan diteruskan ke klien dalam bentuk JSON jika permintaan berhasil. Namun jika terjadi kesalahan, server akan mengembalikan respons error dengan penjelasan mengenai masalah yang terjadi.
4.5 Implementasi Sistem
4.5.1 Implementasi Frontend ReactJS

Gambar 4. 10 Kode home.js
     File home.js adalah komponen halaman beranda (Home) dari aplikasi React Anda. Komponen ini menyusun tampilan awal yang dilihat pengguna saat pertama kali membuka aplikasi. Secara garis besar, komponen ini menggabungkan elemen visual menarik seperti gambar latar belakang (background), teks sambutan, dan tombol interaktif dengan gaya yang konsisten. Komponen Home terdiri dari dua bagian utama, yang masing-masing menggunakan gambar latar belakang berbeda (backgroundImage dan backgroundImage2) untuk menciptakan efek visual yang menarik dan dinamis.
I. Bagian Pertama (Hero Section + Button Row)
o Bagian ini menggunakan backgroundImage (background1.jpg) sebagai gambar latar belakang.
o Di dalamnya terdapat komponen HeroSection, yang kemungkinan besar menampilkan judul utama atau pengantar yang menggugah (semacam "Selamat datang di dunia eksoplanet").
o Lalu disusul oleh ButtonRow, yang menampilkan deretan tombol navigasi atau aksi utama seperti "Jelajahi Sistem", "Mulai Kuis", atau "Belajar Sekarang".
o Sebuah elemen div dengan gaya overlay juga disisipkan agar tampilan menjadi lebih gelap/transparan atau berlapis, untuk meningkatkan keterbacaan teks di atas gambar.
II. Bagian Kedua (Welcome Section)
o Bagian ini menggunakan gambar latar belakang yang berbeda (background0.jpg) dan menampilkan komponen WelcomeSection, yang mungkin menyampaikan pesan sambutan lebih panjang atau deskripsi tentang misi aplikasi ini.
o Seperti bagian pertama, bagian ini juga menggunakan overlay untuk memperbaiki kontras antara teks dan gambar.
Gaya (Styles)
Objek styles menyimpan gaya CSS dalam bentuk objek JavaScript:
* container mengatur tinggi layar penuh (100vh), posisi relatif, penataan konten di tengah, dan menampilkan latar belakang dengan ukuran penuh.
* overlay adalah lapisan transparan yang menutupi seluruh kontainer. Ini berguna untuk memberi efek gelap atau filter di atas gambar latar belakang agar elemen di atasnya terlihat jelas.


Gambar 4. 11 Kode KeplerConfirmedApp.jsx
     Pada gambar 4.11 ada Komponen yang bernama KeplerConfirmedApp dan berfungsi sebagai rangka utama (main container) aplikasi React. Komponen ini menyusun berbagai halaman (pages) yang bisa diakses pengguna melalui routing atau penentuan jalur URL, menggunakan pustaka react-router-dom. Pada awal file, berbagai komponen halaman dan navigasi diimpor dari folder components dan pages. Misalnya, Navbar adalah komponen navigasi, dan sisanya seperti Home, AboutUs, SystemList, SystemDetails, dll. adalah halaman konten. Dalam fungsi KeplerConfirmedApp, seluruh isi aplikasi dibungkus oleh sebuah elemen <div> dengan latar belakang berwarna sangat gelap (#030911), yang kemungkinan dibuat untuk meniru nuansa luar angkasa atau antariksa. Di dalamnya, digunakan elemen <Routes> dari React Router v6 untuk menentukan rute (routes) atau jalur URL ke berbagai halaman aplikasi.
Berikut adalah rute-rute yang tersedia:
* "" (atau /) membuka halaman utama (Home)
* "about" membuka halaman "Tentang Kami" (AboutUs)
* "test" membuka halaman untuk percobaan atau rendering pengujian (TestRender)
* "system-list" menuju daftar sistem planet (SystemList)
* "educational" menampilkan materi edukatif (Educational)
* "system-details" menampilkan detail sistem planet (SystemDetails)
* "quiz-list" menampilkan daftar kuis interaktif (QuizList)
* "quiz" membuka halaman kuis spesifik (QuizPage)
* "hologram" mungkin menampilkan tampilan 3D atau visualisasi holografik (Hologram)
* "contact" menampilkan halaman kontak (ContactUs)
* "resources" berisi sumber bacaan atau tautan luar (Resources)
     Dengan pendekatan ini, aplikasi dapat dinavigasi dengan cepat antar halaman hanya dengan mengubah URL, tanpa perlu memuat ulang seluruh halaman. Ini adalah kelebihan utama dari Single Page Application (SPA) yang dibangun dengan React dan React Router.


Gambar 4. 12 Kode Admin.jsx
     Pada Gambar 4.12 ada Komponen Admin.jsx. Admin.jsx merupakan tampilan panel admin dari sebuah aplikasi React yang digunakan untuk menampilkan dan mengelola data eksoplanet. Komponen ini menggunakan React Hooks seperti useState untuk menyimpan data lokal, dan useEffect untuk melakukan pengambilan data dari server saat komponen dimuat pertama kali. Tiga jenis data utama yang diambil dari endpoint API adalah: data eksoplanet terkonfirmasi, planetary systems (sistem planet), dan TESS planet candidates (kandidat planet dari misi TESS NASA). Data tersebut masing-masing disimpan dalam state exoplanets, planetaryData, dan tessCandidates.
     Untuk meningkatkan pengalaman pengguna, terdapat fitur pencarian (search) dan penyaringan (filter) berdasarkan metode penemuan planet (discoverymethod) dan tipe planet (pl_type atau type). Filter ini hanya berlaku jika pengguna memilih dataset eksoplanet. Fungsi filteredExoplanets memfilter daftar planet berdasarkan input pencarian dan filter yang dipilih oleh pengguna.
     Komponen ini memiliki layout yang terdiri dari dua bagian utama: sidebar kiri dan konten utama. Sidebar berisi elemen input pencarian dan dropdown filter yang memungkinkan pengguna menyaring data eksoplanet berdasarkan metode penemuan dan tipe planet. Konten utama dibagi menjadi tiga bagian berdasarkan dataset yang dipilih melalui dropdown: eksoplanet, planetary systems, dan TESS candidates. Pengguna dapat beralih antara ketiga dataset tersebut menggunakan dropdown di atas bagian utama konten.
     Untuk dataset eksoplanet, setiap entri menampilkan gambar placeholder, nama planet (dengan tautan menuju halaman detail), metode penemuan, periode orbit, dan radius dalam satuan Jupiter. Jika pengguna memilih dataset planetary systems, data yang ditampilkan meliputi nama planet, bintang induk, metode penemuan, periode orbit, dan radius. Sedangkan untuk kandidat planet TESS, informasi yang ditampilkan mencakup nama planet atau TOI (TESS Object of Interest), ID TIC, TOI, periode orbit, radius dalam satuan Bumi, dan temperatur bintang induk.
     Komponen juga menyediakan tautan menuju halaman eksplorasi data visualisasi scatter plot dan histogram dengan tombol "Explore Planetary Data". Di bagian paling bawah terdapat footer yang menampilkan jumlah total data yang berhasil dimuat dari ketiga kategori dataset dan menyebutkan bahwa data tersebut bersumber dari NASA Exoplanet Archive.


Gambar 4. 13 Kode App.jsx
     Pada Gambar 4.13 ada file App.jsx yang merupakan komponen utama dalam aplikasi React yang bertanggung jawab atas pengaturan routing atau navigasi antar halaman (komponen) dalam aplikasi menggunakan react-router-dom. Komponen ini membungkus seluruh isi aplikasi di dalam elemen <BrowserRouter>, yang memungkinkan navigasi berdasarkan URL tanpa melakukan reload halaman secara penuh. Di dalamnya, terdapat dua context provider utama yaitu CsvDataProvider dan PlotSettingsProvider. CsvDataProvider menyimpan dan menyediakan data CSV yang digunakan oleh berbagai komponen, sementara PlotSettingsProvider menangani pengaturan visualisasi (seperti scatter plot atau histogram) agar dapat diakses lintas komponen.
     Navigasi aplikasi diatur melalui komponen <Routes> yang mendefinisikan berbagai jalur (routes) dan komponen yang ditampilkan ketika pengguna mengunjungi URL tertentu. Berikut penjelasan masing-masing route:
* / menampilkan komponen Admin, yang merupakan tampilan utama untuk mengelola dan menampilkan data eksoplanet.
* /explore-data menampilkan ScatterHistogramLayout, yaitu komponen visualisasi data eksoplanet dalam bentuk scatter plot dan histogram.
* /login dan /signup masing-masing menampilkan halaman Login (Signin) dan Sign Up, tempat pengguna bisa masuk atau mendaftar ke sistem.
* /service/* mengarah ke komponen Services, yang mungkin mencakup berbagai layanan terkait data atau API.
* /kepler/* mengarahkan ke KeplerConfirmedApp, aplikasi khusus untuk eksplorasi data dari misi Kepler.
* /profile mengarahkan ke halaman Profile, tempat pengguna dapat melihat atau mengubah informasi profil mereka.
* /nasamain mengarahkan ke Nasamain, yang kemungkinan merupakan halaman utama yang berisi data atau fitur dari NASA.
Selain itu, komponen Navbar juga dirender di luar <Routes>, sehingga tampil di semua halaman.










4.5.3 Implementasi Visualisasi Interaktif


Gambar 4. 14 Kode ScatterHistogramLayout.jsx

Gambar 4. 15 Kode PlotSettingContext.jsx

Gambar 4. 16 Kode CSVDataContext.jsx
     Ada tiga kode yang akan implementasi visualisasi interaktif, pertama ada ScatterHistogramLayout Pada Gambar 4.14. Komponen ScatterHistogramLayout adalah antarmuka utama dalam aplikasi React yang digunakan untuk memvisualisasikan data dari file CSV dalam bentuk scatter plot dan histogram. Komponen ini memungkinkan pengguna untuk mengunggah file CSV, memilih jenis visualisasi yang ingin ditampilkan (scatter plot, histogram, atau keduanya secara bersamaan), dan menyesuaikan tampilan visualisasi melalui kontrol khusus. Data CSV yang diunggah diproses secara lokal dengan membaca setiap baris dan kolom, lalu disimpan dalam konteks global agar dapat diakses oleh komponen lain. Tampilan antarmuka terdiri dari dua bagian utama: sidebar di sisi kiri dan area tampilan grafik di sisi kanan. Sidebar menyediakan tombol navigasi untuk mengganti jenis tampilan visualisasi dan fitur unggah file CSV. Sementara itu, bagian utama menampilkan visualisasi data berdasarkan mode tampilan yang dipilih. Untuk masing-masing jenis grafik, pengguna dapat membuka pengaturan tambahan (dalam bentuk modal) untuk menyesuaikan aspek visual seperti sumbu, warna, atau kolom data yang digunakan. Kode ini memanfaatkan React Hooks (useState) untuk mengelola status tampilan dan kontrol, serta Context API (useCsvData) untuk membagikan data CSV antar komponen. Dengan arsitektur ini, pengguna dapat secara fleksibel menjelajahi dan menganalisis data CSV secara interaktif dan visual.
     Lalu Komponen kedua ada File PlotSettingsContext.jsx pada Gambar 4.15, file PlotSettingsContext.jsx  mendefinisikan context React yang digunakan untuk menyimpan dan mengelola pengaturan visualisasi grafik, khususnya untuk scatter plot dan histogram. Komponen ini menggunakan createContext dan useContext untuk membuat context global bernama PlotSettingsContext, sehingga pengaturan grafik dapat diakses oleh komponen lain dalam aplikasi tanpa perlu mengoper props secara manual. Terdapat dua jenis pengaturan yang disediakan: scatterSettings dan histogramSettings, yang masing-masing memiliki nilai default seperti sumbu X dan Y, warna titik, jumlah bins, dan warna batang. Nilai-nilai ini dikelola menggunakan useState, dan saat pertama kali di-load, aplikasi akan mencoba memuat pengaturan yang tersimpan sebelumnya dari localStorage. Jika tidak ditemukan, maka akan digunakan nilai default. Melalui dua buah useEffect, setiap perubahan pada pengaturan scatter dan histogram akan otomatis disimpan kembali ke localStorage, sehingga pengguna tidak kehilangan konfigurasi meskipun me-refresh halaman. Selain itu, disediakan fungsi resetScatter dan resetHistogram untuk mengembalikan pengaturan ke nilai defaultnya. Akhirnya, komponen PlotSettingsProvider membungkus semua elemen anaknya ({children}) dengan context provider, menyediakan semua fungsi dan data yang berkaitan dengan pengaturan grafik. Komponen lain dalam aplikasi dapat mengakses context ini melalui hook usePlotSettings, memungkinkan fleksibilitas dan kontrol terpusat terhadap tampilan visualisasi data.
     Lalu Komponen ketiga ada CsvDataContext.jsx pada Gambar 4.16. File CsvDataContext.jsx berfungsi sebagai context provider dalam React untuk memuat, memproses, dan menyediakan data CSV ke seluruh aplikasi. Dengan menggunakan createContext dan useContext, file ini membentuk konteks global bernama CsvDataContext yang memungkinkan komponen lain mengakses data CSV tanpa perlu mengoper props secara manual.
     State csvData menyimpan seluruh isi data CSV dalam bentuk array objek, sementara csvColumns menyimpan nama-nama kolom. loading menandakan status pemrosesan, dan error menangkap pesan kesalahan jika terjadi kegagalan saat parsing. Untuk membaca file CSV, library PapaParse digunakan melalui fungsi parseCsv, yang dapat menerima teks mentah atau objek file. Fungsi ini mengatur parsing dengan header: true, dynamicTyping: true, dan skipEmptyLines: true, sehingga hasilnya langsung berupa objek dengan tipe data otomatis. Setelah parsing berhasil, nama kolom dipangkas dari spasi, dan setiap baris data disesuaikan dengan kolom yang telah dipangkas, menghasilkan data yang lebih bersih dan siap digunakan. Informasi ini kemudian disimpan ke dalam state csvData dan csvColumns.
     Selain itu, pada saat komponen di-mount, aplikasi akan otomatis memuat file default PS_2025.05.15_06.38.49.csv dari direktori publik /data/. Baris komentar dan baris kosong akan dihapus sebelum diparsing untuk memastikan kebersihan data. Jika terjadi kegagalan saat fetch atau parsing, pesan kesalahan akan disimpan dalam state error. Dengan menyertakan semua fungsi dan state penting di dalam CsvDataContext.Provider, komponen ini memungkinkan komponen lain dalam aplikasi untuk mengakses dan memanfaatkan data CSV melalui hook useCsvData. Ini sangat berguna untuk aplikasi berbasis data, seperti visualisasi atau analisis data berbasis CSV.
4.6 Hasil Tampilan Antarmuka Aplikasi
     Bagian ini menyajikan visualisasi  antarmuka pengguna aplikasi frontend admin yang telah diimplementasikan sebagai hasil dari proses pengembangan yang telah dijelaskan pada bagian sebelumnya. Setiap elemen antarmuka dirancang dengan mempertimbangkan aspek fungsionalitas, pengalaman pengguna, dan konsistensi desain untuk memastikan efektivitas sistem dalam mendukung proses administrasi dan pengelolaan data dalam penelitian ini.




4.7.1 Halaman Beranda


Gambar 4. 17 Halaman Beranda EXOPLORERS
     Pada Gambar 4.17 merupakan tampilan halaman beranda awal aplikasi EXOPLORERS yang muncul setelah membuka aplikasi. Aplikasi ini berfungsi sebagai aplikasi interaktif bidang astronomi. Pada halaman ini terdapat tombol Exoplanet Story, Launch the Hologram, Explore the system of our universe dan Planetary Quiz. Desain antarmuka dilengkapi dengan background luar angkasa dan astronaut.
4.7.2 Halaman Login


Gambar 4. 18  Halaman Login

     Pada Gambar 4.18 merupakan antarmuka autentikasi yang digunakan untuk login dengan hak akses penuh. Antarmuka ini dirancang dengan tampilan minimalis dan berfungsi sebagai gerbang akses universal yang dapat digunakan oleh berbagai tipe pengguna termasuk mahasiswa, admin, maupun verifikator. Pengguna cukup memasukkan kredensial berupa Email dan Password pada kolom input yang disediakan, kemudian menekan tombol "Sign In" berwarna merah untuk melakukan autentikasi. Lalu data akan diproses ke dalam rute /api/auth/signin atau /api/auth/google kalau memencet tombol "Continue with Google" .Sistem akan secara otomatis mengenali tipe akun berdasarkan kredensial yang dimasukkan dan mengarahkan pengguna ke dashboard yang sesuai dengan peran mereka dalam aplikasi, baik sebagai mahasiswa yang mengelola portofolio, admin yang mengatur sistem, atau verifikator yang bertugas memvalidasi pendaftaran dan data mahasiswa.
4.7.3 Halaman Daftar

Gambar 4. 19 Halaman Sign Up
Pada Gambar 4.19 merupakan antarmuka pendaftaran yang diperuntukkan bagi mahasiswa yang ingin menggunakan aplikasi EXOPLORERS. Pada halaman ini, mahasiswa perlu mengisi beberapa data penting sebagai kolom wajib, meliputi Email, Username, dan Password untuk mengamankan akun.
Setelah usermengisi semua informasi yang diperlukan, mereka dapat menekan tombol "SIGN UP" berwarna abu-abu di bagian bawah formulir. Data yang telah dimasukkanakan masuk ke dalam endpoint /api/auth/signup. Setelah proses verifikasi selesai dan disetujui, Data akan kesimpan ke dalam database dan bisa lihat datanya di profile.

4.7.4 Halaman Profile

Gambar 4. 20 Halaman Profile
     Pada Gambar 4.20 ada Halaman Profil, di halaman profil user bisa mengupdate informasi mengenai data loginnya seperti Email, Username, Password, dan Foto Profil. Setelah diupdate, maka Username, Email, Password, dan Foto Profilnya yang terbaru akan ditampilkan.
4.7.5 Halaman Admin untuk menampilkan data Exoplanet dari API

Gambar 4. 21 Halaman Admin
     Pada Gambar 4.21 ada Halaman Admin. Di halaman Admin ini, ada data yang tampilkan dari rute API yang berasal dari rute "/api/exoplanets","/api/planetary-systems", dan "/api/tess-candidates" yang dipanggil dari TAP service NASA Exoplanet Archive, disini ada fitur Filter & Search Dimana user bisa mencari exoplanetnya berdasarkan Metode Penemuan dan Tipe Exoplanetnya, dan diatas ada Tombol "Explore Planetary Data (Scatter + Histogram)" dimana akan redirect ke halaman "explore-data". Dan ada fitur "Tampilkan Dataset" berdasarkan api yang dipanggil seperti "/api/exoplanets","/api/planetary-systems", dan "/api/tess-candidates".
4.7.6 Halaman explore-data

Gambar 4. 22 Tampilan Scatter Plot

Gambar 4. 23 Tampilan Histogram

Gambar 4. 24 Tampilan Split View
     Pada halaman explore data, terdapat bermacam-macam visualisasi seperti Scatter Plot di Gambar 4.22 dan Histogram pada Gambar 4.23, Dimana data yang telah diupload akan divisualisasikan menggunakan scatter plot dan histogram,. Pada scatter plot user X Axis dan Y axis berdasarkan kolom dari datasetnya, lalu user juga bisa memberikan warna dan ukuran pada point visualisasi dan menampilkan Error Bars dan Regression Line. Untuk di Histogram, user bisa melihat graphnya bedasarkan kolom yang dipilih dan ada split view pada Gambar 4.24 untuk menampilkan kedua fitur visualisasinya.
4.7.8 Halaman NASA Astronomical Picture Of The Day

Gambar 4. 25 Halaman NASA-APOD
     Pada Halaman NASA Astronomical Picture Of The Day pada Gambar 4.25, user bisa melihat konten edukatif tentang bidang astronomi, situs ini menampilkan satu gambar atau video astronomi yang menakjubkan. Konten bisa berupa Foto luar angkasa dari teleskop (Hubble, James Webb, dll), Foto dari misi NASA (misalnya Mars Rover), Gambar dari fotografer amatir astronomi, Ilustrasi atau animasi ilmiah, Video time-lapse astronomi, Tautan 
     ke gambar resolusi tinggi, Akses ke referensi tambahan untuk eksplorasi lebih lanjut, Terkadang terdapat link ke artikel jurnal atau halaman misi NASA terkait. Data NASA APOD ini berasal dari api APOD dengan endpoint https://api.nasa.gov/planetary/apod menggunakan metode GET untuk mendapatkan file JSON ayng akan ditampilkan di website ini.
     
4.7 Pengujian dan Evaluasi Sistem
4.7.1 Pengujian Backend (Flask API)
Pengujian backend dilakukan untuk memastikan bahwa seluruh endpoint API yang disediakan oleh framework Flask telah berfungsi sesuai dengan kebutuhan sistem dan menghasilkan output yang benar. Pengujian dilakukan menggunakan metode black box, yaitu hanya memeriksa respons dari permintaan HTTP tanpa melihat kode sumber.
Tujuan utama dari pengujian ini meliputi:
* Memastikan konektivitas dengan basis data MongoDB.
* Memastikan setiap endpoint dapat diakses dengan metode HTTP yang tepat (GET, POST, PUT).
* Menilai struktur dan isi dari respons JSON.
* Memverifikasi status code (seperti 200 OK, 400 Bad Request, 401 Unauthorized).
* Mengevaluasi kecepatan respons (response time).
Metodologi Pengujian
Pengujian dilakukan menggunakan:
* Postman dan/atau Insomnia untuk simulasi permintaan API.
* Chrome DevTools (Network tab) untuk melihat waktu respons saat integrasi dengan frontend ReactJS.
Setiap endpoint diuji berdasarkan:
* Metode HTTP yang digunakan
* Input (parameter, body JSON)
* Output yang diharapkan
* Status dan hasil aktual


Endpoint
Method
Input
Output
Result
Api/SignUp
POST
Nama, Email, dan Password
Pesan daftar berhasil dan akan melalui tahap approval oleh rute /auth

Berhasil
/api/login
POST
Email dan
password
Refresh token, Access token, dan expired kedua token
Berhasil
/api/Logout
POST
    Refresh token
Pesan Logout
berhasil
Berhasil
Refresh Token
POST
     Refresh token
Refresh token baru, Access token baru, dan expired kedua
token baru
Berhasil
User	Not Verified
(Verifikator)
GET
Filter	waiting
approval, rejected, atau approved
Data	sesuai	dari
filter yang diinput
Berhasil
User Verification
(Verifikator)
PUT
Target User ID
Pesan	user	atau mahasiswa berhasil
diverifikasi
Berhasil
Reject	User
(Verifikator)
PUT
Target User ID dan Catatan Penolakan
Pesan user atau mahasiswa berhasil ditolak untuk verifikasi
Berhasil
/api/exoplanets
GET
        -
Data JSON dari exoplanets
Berhasil
/api/tess-exoplanet
GET
        -
Data JSON kandidat planet TESS
Berhasil
/api/planetary-systems
GET
       -
Data JSON planetary-sytems dari database
Berhasil

Tabel 4.1 Respons Endpoint
Analisis Hasil Pengujian
* Semua endpoint berhasil memberikan output JSON yang valid dan konsisten.
* Autentikasi menggunakan JWT berhasil, termasuk login, logout, dan token refresh.
* Data filter menggunakan parameter seperti ?method=Transit berhasil menampilkan subset data sesuai permintaan.
* Response time untuk setiap permintaan berada di bawah 300 ms (dalam pengujian lokal), menunjukkan performa API yang baik.

4.8.2 Pengujian Frontend (ReactJS)
Pengujian frontend dilakukan untuk memastikan bahwa semua komponen ReactJS pada aplikasi dapat berjalan dengan baik, serta bahwa antarmuka pengguna (user interface) bekerja sesuai dengan fungsi yang diharapkan. Pengujian dilakukan dengan metode black box, yang berarti pengujian difokuskan pada interaksi pengguna tanpa mengakses kode sumber program.
Pengujian frontend mencakup beberapa aspek utama:
* Navigasi antar halaman (beranda, tabel exoplanet, visualisasi, detail planet, login, dan logout).
* Rendering data dari backend API ke dalam tabel dan visualisasi grafik (Chart.js atau D3.js).
* Interaksi pencarian dan filter, termasuk validasi input pengguna dan respons tampilan.
* Responsivitas tampilan antarmuka pada berbagai ukuran layar (mobile, tablet, dan desktop), diuji menggunakan Chrome DevTools.

Contoh hasil uji:
No.
Fitur / Halaman
Aksi/Input
Hasil Yang Diharapkan
Status
1.
Beranda (/ atau /kepler)
Akses langsung
Tampilan halaman awal aplikasi
Berhasil
2.
Explore Data (/explore-data)
Klik menu "Explore Data"
Scatter plot + histogram dari data API muncul
Berhasil
3.
Ketik "Planetary Systems" tampil hasil relevan
Masukkan email & password, klik login
Redirect ke halaman profile / admin
Berhasil
4.
Login (/login)
Masukkan email & password, klik login
Pesan sukses muncul dan masuk tahap approval
Berhasil
5.
Profil (/profile)
Klik menu profil setelah login
Informasi pengguna muncul
Berhasil
6.
NASAmain (/nasamain)
Klik menu NASA
Tampilkan gambar & data NASA secara real-time
Berhasil
7.
Visualisasi Orbit
Klik grafik planet (Explore/Scatter)
Muncul popup/detail planet
Berhasil
8.
Filter Metode Transit
Pilih "Transit" dari dropdown
Hanya planet dengan metode Transit ditampilkan
Berhasil
9.


Detail Sistem (/system-details)

Klik sistem dari daftar
Informasi lengkap sistem planet muncul
Berhasil
10.
Kuis (/quiz, /quiz-list)
Klik mulai kuis
Kuis ditampilkan, dapat dijawab, skor muncul
Berhasil
11.
About Us (/about)
Klik menu "Tentang Kami"
Halaman deskripsi tim & aplikasi muncul
Berhasil
12.
Hologram (/hologram)
Akses langsung
Tampilan holografik sistem planet ditampilkan
Berhasil
13.
Contact Us (/contact)
Isi dan kirim form kontak
Pesan berhasil dikirim atau muncul
Berhasil
14.
Responsivitas Mobile
Ukuran layar < 420px
Tampilan tetap proporsional, tidak pecah
Berhasil
15.
Responsivitas Desktop
Ukuran > 1280px
Komponen tetap rapi dan responsif
Berhasil
Tabel 4.2 Hasil Pengujian Frontend Aplikasi
Analisis Hasil Pengujian
* Semua halaman berhasil dirender melalui React Router tanpa error.
* Integrasi data dari backend melalui fetch atau axios berjalan lancar.
* Komponen seperti kuis, tabel data, grafik, dan visualisasi interaktif tidak mengalami crash.
* Console browser bersih dari error pada Chrome DevTools.
* Tampilan antarmuka konsisten pada ukuran layar 360px (mobile), 768px (tablet), dan 1920px (desktop).
4.8.4 Pengujian Black Box 
     Pengujian black box dilakukan dari sisi pengguna tanpa melihat isi kode. Fokus pada pengujian fungsi dan antarmuka aplikasi:
* Semua fitur diuji berdasarkan input yang diberikan dan hasil yang diharapkan.
* Tujuan utamanya adalah mengecek kesesuaian sistem terhadap kebutuhan fungsional.
Hasil black box testing:
No.
Endpoint/Fitur
Input Contoh
Output yang diharapkan
Output Aktual
Status
Pencarian data
M62H b
Exoplanet yang dicari

Sesuai
Berhasil
Klik grafik orbit
Klik planet tertentu
Muncul detail exoplanet

Sesuai
Berhasil
Login Penguna
Email dan Password valid
Redirect ke Dashboard

Sesuai
Berhasil
Tabel 4. 3 Hasil Pengujian Black Box
4.8.4 Evaluasi Performa Visualisasi
     Evaluasi ini dilakukan untuk mengukur performa sistem terutama saat menangani visualisasi data exoplanet:
* Kecepatan render grafik: Diukur waktu yang dibutuhkan untuk menampilkan grafik orbit/ukuran/parameter setelah data diterima dari API.
* Penggunaan CPU dan memori: Dipantau saat aplikasi berjalan di browser dengan alat seperti Chrome DevTools.
* Performa dengan data besar: Aplikasi diuji dengan jumlah data exoplanet besar (>2000 entri) untuk melihat dampak terhadap render grafik dan tabel.
Contoh temuan:
Parameter
Hasil Uji
Catatan
Waktu Render Grafik
�700ms
Tidak lambat tetapi tidak cepat juga
Penggunaan Memori
�120MB
Stabil untuk dataset yang berukuran sedang
Performa data besar
Ada penurunan kecil performa grafik orbit
Perlu optimasi bila data>3000
Tabel 4.4 Hasil Pengujian Performa Visualisasi
4.8.5 Evaluasi Kuantitatif terhadap Pengalaman Pengguna
Untuk mengevaluasi kualitas pengalaman pengguna terhadap aplikasi website visualisasi interaktif data exoplanet yang telah dikembangkan, dilakukan uji coba menggunakan pendekatan kuantitatif. Evaluasi ini bertujuan untuk memperoleh gambaran sejauh mana aplikasi memenuhi aspek-aspek kegunaan (usability), responsivitas, kejelasan visual, kemudahan navigasi, serta nilai edukatif berdasarkan persepsi pengguna.
Pengumpulan data dilakukan dengan menggunakan instrumen kuisioner berbasis skala Likert (1-5), di mana:
* 1 = Sangat Tidak Setuju
* 2 = Tidak Setuju
* 3 = Netral
* 4 = Setuju
* 5 = Sangat Setuju
Kuisioner disusun berdasarkan lima variabel utama, yaitu:
1. Usability
Menilai kemudahan penggunaan dan kepuasan saat pertama kali menggunakan aplikasi.
Contoh indikator:
o Aplikasi ini mudah dipelajari saat pertama kali digunakan.
o Saya dapat menyelesaikan tugas dengan cepat setelah mencoba aplikasi ini.
o Saya merasa puas saat menggunakan aplikasi ini.
2. Responsiveness
Menilai kemampuan aplikasi beradaptasi dan berjalan baik di berbagai perangkat dan ukuran layar.
Contoh indikator:
o Tampilan aplikasi menyesuaikan dengan baik pada berbagai ukuran layar (PC, tablet, HP).
o Transisi antar halaman terasa cepat dan tidak mengalami jeda.
3. Visual Clarity
Menilai kejelasan elemen visual dalam aplikasi, seperti teks, warna, grafik, dan visualisasi data.
Contoh indikator:
o Visualisasi data mudah dipahami.
o Warna dan grafik terlihat jelas dan tidak menyilaukan.
4. Navigability
Menilai kemudahan berpindah antar fitur dan struktur navigasi secara keseluruhan.
Contoh indikator:
o Menu dan tombol navigasi mudah ditemukan.
o Struktur navigasi antar halaman logis dan mudah diikuti.
5. Educational Value
Menilai seberapa besar aplikasi memberikan nilai edukatif dan mendukung pemahaman pengguna terhadap topik exoplanet.
Contoh indikator:
o Aplikasi ini membantu saya memahami informasi tentang exoplanet.
o Fitur-fitur seperti visualisasi atau cerita mendukung pembelajaran saya secara menyenangkan.
Penilaian dilakukan terhadap lima (5) orang responden, yang terdiri dari mahasiswa dan individu yang memiliki ketertarikan dalam bidang astronomi atau pengembangan web. Data hasil kuisioner kemudian dianalisis secara deskriptif untuk memperoleh rata-rata skor dari masing-masing variabel dan digunakan sebagai dasar dalam menilai kualitas pengalaman pengguna.
Responden dan Prosedur Evaluasi
Kuisioner disebarkan kepada 5 responden yang terdiri dari mahasiswa dan pengguna yang memiliki ketertarikan dalam astronomi atau teknologi web. Setiap responden diminta mengakses dan menggunakan fitur utama aplikasi sebelum mengisi kuisioner. Data yang terkumpul dianalisis secara deskriptif untuk memperoleh rata-rata skor dari masing-masing variabel.

Tujuan Evaluasi
Evaluasi ini bertujuan untuk memberikan gambaran:
* Apakah aplikasi memenuhi harapan pengguna dari segi kemudahan dan kenyamanan
* Apakah informasi visual yang ditampilkan cukup jelas dan informatif
* Sejauh mana fitur aplikasi mampu mendukung pemahaman pengguna terhadap konsep exoplanet
* Apa saja aspek yang perlu ditingkatkan dari sudut pandang pengalaman pengguna

4.8.6 Hasil Evaluasi dan Analisis Deskriptif
Setelah proses penyebaran kuisioner dilakukan kepada empat (4) responden, data yang dikumpulkan kemudian dianalisis secara deskriptif dengan menghitung nilai rata-rata dari tiap variabel. Setiap indikator diberi nilai antara 1 (sangat tidak setuju) hingga 5 (sangat setuju).
Langkah Analisis:
1. Pengelompokan indikator berdasarkan variabel:
o Usability: 6 indikator
o Responsiveness: 5 indikator
o Visual Clarity: 5 indikator
o Navigability: 5 indikator
o Educational Value: 6 indikator
2. Menghitung rata-rata per variabel untuk setiap responden.
3. Menghitung rata-rata keseluruhan per variabel.

No.
Nama Responden
Usability
Responsiveness
Visual Clarity
Navigability
Educational Value
1.
Muhammad Ghania
4.00
4.40
4.40
4.40
4.33
2.
Simon Simanjuntak
3.83
3.60
3.80
4.20
3.67
3.
Juan
4.00
4.20
4.20
4.40
4.67
4.
Arsy Sanjaya
3.83
4.00
4.00
3.80
3.83
Rata-rata
3.91
4.05
4.25
4.20
4.13
Tabel 4. 5 Rata-rata skor per responden dan variabel
Variabel
Rata-rata
Interpretasi
Usability
3.91
Baik
Responsiveness
4.05
Baik
Visual Clarity
4.25
Sangat Baik
Navigability
4.20
Baik
Educational Value
4.13
Baik
Kesimpulan Deskriptif
Berdasarkan hasil perhitungan rata-rata dari seluruh responden, dapat disimpulkan bahwa:
* Aplikasi memiliki tampilan yang jelas dan tidak membingungkan secara visual (Visual Clarity = 4.25).
* Pengguna merasa mudah dalam navigasi dan berpindah antar fitur.
* Respons waktu dan transisi antar halaman dinilai cepat dan mulus oleh sebagian besar responden.
* Aplikasi dianggap memberikan nilai edukatif yang tinggi meskipun masih bisa ditingkatkan lebih lanjut.
Secara keseluruhan, persepsi pengguna terhadap aplikasi visualisasi interaktif data exoplanet berada pada kategori "Baik" hingga "Sangat Baik", dengan Visual Clarity sebagai aspek paling menonjol.

4.10 Implementasi Aplikasi
Hasil Aplikasi ditaruhkan di dalam github dengan link https://github.com/Dimasajalah/ExoPlanetService


BAB V PENUTUP
5.1 Kesimpulan
     Berdasarkan hasil penelitian dan pengembangan aplikasi website visualisasi interaktif data exoplanet menggunakan ReactJS dan Flask, maka dapat disimpulkan bahwa:
1. Aplikasi berhasil dikembangkan sebagai platform visualisasi data exoplanet berbasis web yang interaktif dan informatif, dengan fitur utama seperti visualisasi grafik orbit dan ukuran planet, tampilan data tabel, pencarian dan filter, serta halaman detail exoplanet.
2. Penggunaan ReactJS pada sisi frontend memberikan antarmuka yang responsif, dinamis, dan mudah dikembangkan dengan pendekatan komponen.
3. Backend menggunakan Flask dan MongoDB telah berhasil menyediakan REST API yang efisien dan mudah diakses oleh frontend, termasuk untuk keperluan autentikasi, penyajian data exoplanet, dan pencarian.
4. Visualisasi interaktif yang diimplementasikan menggunakan Chart.js dan D3.js mampu menyajikan data kompleks dalam bentuk grafik yang mudah dipahami oleh pengguna.
5. Hasil pengujian menunjukkan bahwa aplikasi berjalan dengan baik di berbagai browser, memiliki performa yang cukup cepat, dan mampu menangani data dalam jumlah besar secara stabil.
6. Aplikasi ini dapat menjadi sarana edukatif dan informatif untuk masyarakat umum atau pelajar yang ingin mempelajari data astronomi, khususnya mengenai exoplanet.
5.2 Saran
     Saran yang dihasilkan Berdasarkan hasil penelitian dan pengembangan aplikasi website visualisasi interaktif data exoplanet menggunakan ReactJS dan Flask adalah sebagai berikut:
1. Pengayaan data exoplanet sebaiknya terus dilakukan secara berkala dengan integrasi ke sumber data astronomi yang lebih besar atau API seperti NASA Exoplanet Archive.
2. Tingkat interaktivitas visualisasi dapat ditingkatkan lebih lanjut dengan fitur zooming, animasi orbit dinamis, dan highlight per parameter.
3. Fitur user management dan personalisasi tampilan dapat ditambahkan agar pengguna dapat menyimpan preferensi visualisasi atau bookmark exoplanet favorit.
4. Perlu dilakukan pengujian keamanan lebih lanjut terutama pada API dan autentikasi pengguna untuk menghadapi potensi eksploitasi.
5. Di masa depan, aplikasi ini bisa dikembangkan menjadi platform pembelajaran astronomi yang terintegrasi dengan modul pembelajaran, kuis interaktif, atau forum komunitas.



DAFTAR PUSTAKA
Ahmed Z, D'amico S, Hu R, Damiano M. Exoplanet Detection from Starshade Images using Convolutional Neural Networks. http://sister.caltech.edu.
Asian J, Dholah Rosita M, Mantoro T. 2022. Sentiment Analysis for the Brazilian Anesthesiologist Using Multi-Layer Perceptron Classifier and Random Forest Methods. Jurnal Online Informatika. 7(1):132-141. https://doi.org/10.15575/join.v7i1.900.
Bai A. 2023. Million.js: A Fast Compiler-Augmented Virtual DOM for the Web. Di dalam: Proceedings of the ACM Symposium on Applied Computing. Association for Computing Machinery. hlm 1813-1820.
Hasan MdA, Kabir MH, Islam MdS, Han S, Shin W. 2024 Sep 8. A Double-Difference Doppler Shift-Based Positioning Framework with Ephemeris Error Correction of LEO Satellites. http://arxiv.org/abs/2409.05026.
Karbasizadeh P, Faghih F, Golshanrad P. 2024 Jul 30. Effective Black Box Testing of Sentiment Analysis Classification Networks. http://arxiv.org/abs/2407.20884.
Ke-ting SHIN, Dong-sheng AN, Ji-wei XIE, Ji-lin ZHOU. 2024. Orbital Eccentricity of Celestial Motion-from Stars to Planets. Chinese Astronomy and Astrophysics. 48(1):1-40. https://doi.org/10.1016/j.chinastron.2024.03.006.
Malik A, Moster BP, Obermeier C. 2020 Nov 28. Exoplanet Detection using Machine Learning.
Musthofa N, Adiguna MA. 2022. Perancangan Aplikasi E-Commerce Spare-Part Komputer Berbasis Web Menggunakan CodeIgniter Pada Dhamar Putra Ccomputer Kota Tangerang. OKTAL�: Jurnal Ilmu Komputer dan Science. 1(03). https://journal.mediapublikasi.id/index.php/oktal.
Naufal MK, Affrianto F, Cahyono AB. Implementasi REST API Untuk Fitur Rencana Strategis Program Pada SIMPEDA.
Nistrina K, Sahidah L. UNIFIED MODELLING LANGUAGE (UML) UNTUK PERANCANGAN SISTEM INFORMASI PENERIMAAN SISWA BARU DI SMK MARGA INSAN KAMIL.
Noorkaran Bhanarkar, Aditi Paul, Dr. Ashima Mehta. 2023 Apr 20. Responsive Web Design and Its Impact on User Experience. International Journal of Advanced Research in Science, Communication and Technology., siap terbit.
Olivia F, Ibrahim A. 2024. Evaluating User Experience and Usability of the USEPT Website Using User Experience Questionnaire and System Usability Scale Method. Journal of Information Systems and Informatics. 6(4):2632-2648. https://doi.org/10.51519/journalisi.v6i4.910.
Ouyang W. 2024. Data Visualization in Big Data Analysis: Applications and Future Trends. Journal of Computer and Communications. 12(11):76-85. https://doi.org/10.4236/jcc.2024.1211005.
Qiu Z, Li R, Chen W, Zhou Z, Liu J, Hu L, Wu G, Chen J. 2024. Nearly-continuous kilometer-scale free-space optical frequency comparison in the presence of Doppler shift. IEEE Trans Instrum Meas., siap terbit.
Ramdany SW, Aulia Kaidar S, Aguchino B, Amelia C, Putri A, Anggie R. Penerapan UML Class Diagram dalam Perancangan Sistem Informasi Perpustakaan Berbasis Web. Volume ke-5.
Reddy Narayanaswamy G. 2021. Exploiting BERT and RoBERTa to Improve Performance for Aspect Based Sentiment Analysis.
Rehan Anwar M, Hardini M, Anggraeni M. 2021. Review of Responsive Design Concept Based On Framework Materialize On The Website. ADI Journal on Recent Innovation (AJRI). 3(1):59-66. https://doi.org/10.34306/ajri.v3i1.290.
Salvador A, Robinson TD, Fortney JJ, Marley MS. 2024. Influence of Orbit and Mass Constraints on Reflected Light Characterization of Directly Imaged Rocky Exoplanets. Astrophys J Lett. 969(1):L22. https://doi.org/10.3847/2041-8213/ad54c5.
Samsir, Irmayani D, Edi F, Harahap JM, Jupriaman, Rangkuti RK, Ulya B, Watrianthos R. 2021. Naives Bayes Algorithm for Twitter Sentiment Analysis. Di dalam: Journal of Physics: Conference Series. Volume ke-1933. IOP Publishing Ltd.
Saravanos A, Curinga MX. 2023. Simulating the Software Development Lifecycle: The Waterfall Model. Applied System Innovation. 6(6). https://doi.org/10.3390/asi6060108.
Sarjana J, Farrel M, Frizzy A-W. IMPLEMENTASI DATA VISUALIZATION UNTUK SISTEM PREDICTIVE MAINTENANCE DALAM PENINGKATAN EFISIENSI OPERASIONAL MEMANFAATKAN METODE DESIGN THINKING SKRIPSI Program Studi Sistem Informasi.
Seidl M, Scholz M, Huemer C, Kappel G. Undergraduate Topics in Computer Science. http://www.springer.com/series/7592.
Simbulan R, Aryanto J. 2024. Implementasi REST API Web Services pada Aplikasi Sumber Daya Manusia. Jurnal Indonesia�: Manajemen Informatika dan Komunikasi. 5(1):552-560. https://doi.org/10.35870/jimik.v5i1.511.
Ubaform AS, Iswari L. Penerapan React JS Pada Pengembangan FrontEnd.
Walingkas HL, Ocsa P, Saian N. 2023. Penerapan Framework Flask pada Pembangunan Sistem Informasi Pemasok Barang. Jurnal Teknologi Informasi dan Komunikasi). 7(2):2023. https://doi.org/10.35870/jti.
Xu R, Wang Z, Fan R-Z, Liu P. 2024 Apr 29. Benchmarking Benchmark Leakage in Large Language Models. http://arxiv.org/abs/2404.18824.
Zalukhu A, Purba S, Darma D, Zalukhu1 A, Purba2 S, Darma3 D, Teknik Informatika M, Industri FT. 2023. PERANGKAT LUNAK APLIKASI PEMBELAJARAN FLOWCHART. Jurnal Teknologi Informasi dan Industri. 4(1).
Zhao Y, Dumusque X, Cretignier M, Cameron AC, Latham DW, L�pez-Morales M, Mayor M, Sozzetti A, Cosentino R, G�mez-Vargas I, et al. 2024 Mei 21. Improving Earth-like planet detection in radial velocity using deep learning.
 







































DAFTAR LAMPIRAN



2





2


67


